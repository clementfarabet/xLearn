/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.2.1, DynASM x64 version 1.2.1
** DO NOT EDIT! The original file is in "buildvm_x86.dasc".
*/

#if DASM_VERSION != 10201
#error "Version mismatch between DynASM and included encoding engine"
#endif

#define DASM_SECTION_CODE_OP	0
#define DASM_SECTION_CODE_SUB	1
#define DASM_MAXSECTION		2
static const unsigned char build_actionlist[14263] = {
  254,1,248,10,252,247,195,237,15,132,244,11,131,227,252,248,41,218,72,141,
  76,25,252,248,139,90,252,252,199,68,10,4,237,248,12,131,192,1,137,68,36,4,
  252,247,195,237,15,132,244,13,248,14,129,252,243,239,252,247,195,237,15,133,
  244,10,65,199,134,233,237,131,227,252,248,41,211,252,247,219,131,232,1,15,
  132,244,248,248,1,72,139,44,10,72,137,106,252,248,131,194,8,131,232,1,15,
  133,244,1,248,2,255,139,108,36,24,137,157,233,248,3,139,68,36,4,139,76,36,
  16,248,4,57,193,15,133,244,252,248,5,131,252,234,8,137,149,233,248,15,72,
  139,76,36,32,72,137,141,233,49,192,248,16,72,131,196,40,65,94,65,95,91,93,
  195,248,6,15,130,244,253,59,149,233,15,135,244,254,199,66,252,252,237,131,
  194,8,131,192,1,252,233,244,4,248,7,255,133,201,15,132,244,5,41,193,141,20,
  202,252,233,244,5,248,8,137,149,233,137,68,36,4,137,206,137,252,239,232,251,
  1,0,139,149,233,252,233,244,3,248,17,137,252,240,72,137,252,252,248,18,139,
  108,36,24,139,173,233,199,133,233,237,252,233,244,16,248,19,72,129,231,239,
  72,137,252,252,248,20,139,108,36,24,72,199,193,252,248,252,255,252,255,252,
  255,184,237,255,139,149,233,68,139,181,233,65,129,198,239,139,90,252,252,
  199,66,252,252,237,65,199,134,233,237,252,233,244,12,248,21,190,237,252,233,
  244,248,248,22,131,232,8,252,233,244,247,248,23,141,68,194,252,248,248,1,
  15,182,139,233,131,195,4,137,149,233,137,133,233,255,137,92,36,28,137,206,
  248,2,137,252,239,232,251,1,0,139,149,233,139,133,233,139,106,252,248,41,
  208,193,232,3,131,192,1,139,157,233,139,11,15,182,252,233,15,182,205,131,
  195,4,65,252,255,36,252,238,248,24,85,83,65,87,65,86,72,131,252,236,40,137,
  252,253,137,124,36,24,137,252,241,187,237,49,192,76,141,188,253,36,233,68,
  139,181,233,65,129,198,239,76,137,189,233,137,68,36,28,72,137,68,36,32,137,
  68,36,16,137,68,36,20,56,133,233,15,132,244,249,65,199,134,233,237,136,133,
  233,139,149,233,139,133,233,41,200,193,232,3,131,192,1,41,209,139,90,252,
  252,137,68,36,4,252,247,195,237,15,132,244,13,255,252,233,244,14,248,25,85,
  83,65,87,65,86,72,131,252,236,40,187,237,137,76,36,20,252,233,244,247,248,
  26,85,83,65,87,65,86,72,131,252,236,40,187,237,248,1,137,84,36,16,137,252,
  253,137,124,36,24,137,252,241,76,139,189,233,76,137,124,36,32,137,108,36,
  28,72,137,165,233,248,2,68,139,181,233,65,129,198,239,248,3,65,199,134,233,
  237,139,149,233,1,203,41,211,139,133,233,41,200,193,232,3,131,192,1,248,27,
  255,139,105,252,248,129,121,253,252,252,239,15,133,244,28,248,29,137,202,
  137,90,252,252,139,157,233,139,11,15,182,252,233,15,182,205,131,195,4,65,
  252,255,36,252,238,248,30,85,83,65,87,65,86,72,131,252,236,40,137,252,253,
  137,124,36,24,137,108,36,28,68,139,189,233,68,43,189,233,199,68,36,20,0,0,
  0,0,68,137,124,36,16,76,139,189,233,76,137,124,36,32,72,137,165,233,252,255,
  209,133,192,15,132,244,15,137,193,187,237,252,233,244,2,248,11,1,209,131,
  227,252,248,137,213,41,218,199,68,193,252,252,237,137,200,139,93,252,244,
  72,99,77,252,240,76,141,61,245,76,1,252,249,68,139,122,252,248,69,139,191,
  233,255,69,139,191,233,252,255,225,248,31,15,182,75,252,255,131,252,237,16,
  141,12,202,41,252,233,15,132,244,32,252,247,217,193,252,233,3,139,124,36,
  24,137,151,233,137,202,72,139,8,72,137,77,0,137,252,238,252,233,244,33,248,
  34,137,4,36,199,68,36,4,237,72,141,4,36,128,123,252,252,235,15,133,244,247,
  65,141,142,233,137,41,199,65,4,237,137,205,252,233,244,248,248,35,15,182,
  67,252,254,255,252,242,15,42,192,252,242,15,17,4,36,255,72,141,4,36,252,233,
  244,247,248,36,15,182,67,252,254,141,4,194,248,1,15,182,107,252,255,141,44,
  252,234,248,2,139,124,36,24,137,151,233,137,252,238,72,137,194,137,252,253,
  137,92,36,28,232,251,1,1,139,149,233,133,192,15,132,244,249,248,32,15,182,
  75,252,253,72,139,40,72,137,44,202,139,3,15,182,204,15,182,232,131,195,4,
  193,232,16,65,252,255,36,252,238,248,3,139,141,233,137,89,252,244,141,153,
  233,41,211,139,105,252,248,184,237,252,233,244,29,248,37,137,4,36,199,68,
  36,4,237,72,141,4,36,128,123,252,252,235,15,133,244,247,255,65,141,142,233,
  137,41,199,65,4,237,137,205,252,233,244,248,248,38,15,182,67,252,254,255,
  72,141,4,36,252,233,244,247,248,39,15,182,67,252,254,141,4,194,248,1,15,182,
  107,252,255,141,44,252,234,248,2,139,124,36,24,137,151,233,137,252,238,72,
  137,194,137,252,253,137,92,36,28,232,251,1,2,139,149,233,133,192,15,132,244,
  249,15,182,75,252,253,72,139,44,202,72,137,40,248,40,139,3,15,182,204,15,
  182,232,131,195,4,193,232,16,65,252,255,36,252,238,248,3,139,141,233,137,
  89,252,244,15,182,67,252,253,72,139,44,194,72,137,105,16,141,153,233,41,211,
  139,105,252,248,184,237,252,233,244,29,248,41,139,108,36,24,137,149,233,141,
  52,202,141,20,194,137,252,239,15,182,75,252,252,137,92,36,28,232,251,1,3,
  248,3,139,149,233,255,131,252,248,1,15,135,244,42,248,4,141,91,4,15,130,244,
  252,248,5,15,183,67,252,254,141,156,253,131,233,248,6,139,3,15,182,204,15,
  182,232,131,195,4,193,232,16,65,252,255,36,252,238,248,43,131,195,4,129,120,
  253,4,239,15,130,244,5,252,233,244,6,248,44,129,120,253,4,239,252,233,244,
  4,248,45,131,252,235,4,137,206,137,252,233,139,108,36,24,137,149,233,255,
  137,194,137,252,239,137,92,36,28,232,251,1,4,252,233,244,3,248,46,65,141,
  4,199,252,233,244,247,248,47,65,141,4,199,141,44,252,234,149,252,233,244,
  248,248,48,141,4,194,137,197,252,233,244,248,248,49,141,4,194,248,1,141,44,
  252,234,248,2,141,12,202,68,15,182,67,252,252,137,206,137,193,139,124,36,
  24,137,151,233,137,252,234,137,252,253,137,92,36,28,232,251,1,5,139,149,233,
  133,192,15,132,244,40,248,42,137,193,41,208,137,89,252,244,141,152,233,255,
  184,237,252,233,244,27,248,50,139,108,36,24,137,149,233,141,52,194,137,252,
  239,137,92,36,28,232,251,1,6,139,149,233,252,233,244,42,248,51,141,76,202,
  8,248,28,137,76,36,4,137,4,36,131,252,233,8,139,108,36,24,137,149,233,137,
  206,141,20,193,137,252,239,137,92,36,28,232,251,1,7,139,149,233,139,76,36,
  4,139,4,36,139,105,252,248,131,192,1,65,57,215,15,132,244,52,137,202,137,
  90,252,252,139,157,233,139,11,15,182,252,233,15,182,205,131,195,4,65,252,
  255,36,252,238,248,53,139,108,36,24,137,149,233,137,206,137,252,239,137,92,
  36,28,232,251,1,8,139,149,233,139,67,252,252,15,182,204,15,182,232,193,232,
  16,65,252,255,164,253,252,238,233,248,54,255,129,252,248,239,15,130,244,55,
  139,106,4,129,252,253,239,15,131,244,55,139,90,252,252,137,68,36,4,137,106,
  252,252,139,42,137,106,252,248,131,232,2,15,132,244,248,137,209,248,1,131,
  193,8,72,139,41,72,137,105,252,248,131,232,1,15,133,244,1,248,2,139,68,36,
  4,252,233,244,56,248,57,129,252,248,239,15,130,244,55,139,106,4,137,252,233,
  193,252,249,15,131,252,249,252,254,15,132,244,249,255,184,237,252,247,213,
  57,232,255,15,71,197,255,15,134,244,247,137,232,248,1,255,248,2,139,106,252,
  248,139,132,253,197,233,139,90,252,252,199,66,252,252,237,137,66,252,248,
  252,233,244,58,248,3,184,237,252,233,244,2,248,59,129,252,248,239,15,130,
  244,55,139,106,4,139,90,252,252,129,252,253,239,15,133,244,252,248,1,139,
  42,139,173,233,248,2,133,252,237,199,66,252,252,237,255,15,132,244,58,65,
  139,134,233,199,66,252,252,237,137,106,252,248,139,141,233,35,136,233,105,
  201,239,3,141,233,248,3,129,185,233,239,15,133,244,250,57,129,233,15,132,
  244,251,248,4,139,137,233,133,201,15,133,244,3,255,252,233,244,58,248,5,139,
  105,4,129,252,253,239,15,132,244,58,139,1,137,106,252,252,137,66,252,248,
  252,233,244,58,248,6,129,252,253,239,15,132,244,1,129,252,253,239,15,135,
  244,253,189,237,248,7,252,247,213,65,139,172,253,174,233,252,233,244,2,248,
  60,255,129,252,248,239,15,130,244,55,129,122,253,4,239,15,133,244,55,139,
  42,131,189,233,0,15,133,244,55,129,122,253,12,239,15,133,244,55,139,66,8,
  137,133,233,139,90,252,252,199,66,252,252,237,137,106,252,248,252,246,133,
  233,235,15,132,244,247,128,165,233,235,255,65,139,134,233,65,137,174,233,
  137,133,233,248,1,252,233,244,58,248,61,129,252,248,239,15,130,244,55,129,
  122,253,4,239,15,133,244,55,137,213,139,50,141,82,8,139,124,36,24,232,251,
  1,9,137,252,234,72,139,40,139,90,252,252,72,137,106,252,248,252,233,244,58,
  248,62,129,252,248,239,15,133,244,55,129,122,253,4,239,255,15,135,244,55,
  255,252,242,15,16,2,252,233,244,63,255,221,2,252,233,244,64,255,248,65,129,
  252,248,239,15,130,244,55,139,90,252,252,129,122,253,4,239,15,133,244,249,
  139,2,248,2,199,66,252,252,237,137,66,252,248,252,233,244,58,248,3,129,122,
  253,4,239,15,135,244,55,65,131,190,233,0,15,133,244,55,65,139,174,233,65,
  59,174,233,255,15,130,244,247,232,244,66,248,1,139,108,36,24,137,149,233,
  137,92,36,28,137,214,137,252,239,232,251,1,10,139,149,233,252,233,244,2,248,
  67,129,252,248,239,15,130,244,55,15,132,244,248,248,1,129,122,253,4,239,15,
  133,244,55,139,108,36,24,137,149,233,255,137,149,233,139,90,252,252,139,50,
  141,82,8,137,252,239,137,92,36,28,232,251,1,11,139,149,233,133,192,15,132,
  244,249,72,139,106,8,72,139,66,16,72,137,106,252,248,72,137,2,248,68,184,
  237,252,233,244,69,248,2,199,66,12,237,252,233,244,1,248,3,199,66,252,252,
  237,252,233,244,58,248,70,129,252,248,239,15,130,244,55,255,139,106,252,248,
  129,122,253,4,239,15,133,244,55,139,133,233,139,90,252,252,199,66,252,252,
  237,137,66,252,248,199,66,12,237,184,237,252,233,244,69,248,71,129,252,248,
  239,15,130,244,55,129,122,253,4,239,15,133,244,55,129,122,253,12,239,15,135,
  244,55,139,90,252,252,255,252,242,15,16,66,8,72,189,237,237,102,72,15,110,
  205,252,242,15,88,193,252,242,15,45,192,252,242,15,17,66,252,248,255,139,
  42,59,133,233,15,131,244,248,193,224,3,3,133,233,248,1,129,120,253,4,239,
  15,132,244,72,72,139,40,72,137,42,252,233,244,68,248,2,131,189,233,0,15,132,
  244,72,137,252,239,137,213,137,198,232,251,1,12,137,252,234,133,192,15,133,
  244,1,248,72,184,237,252,233,244,69,248,73,255,129,252,248,239,15,130,244,
  55,139,106,252,248,129,122,253,4,239,15,133,244,55,139,133,233,139,90,252,
  252,199,66,252,252,237,137,66,252,248,255,15,87,192,252,242,15,17,66,8,255,
  217,252,238,221,90,8,255,184,237,252,233,244,69,248,74,129,252,248,239,15,
  130,244,55,141,74,8,131,232,1,187,237,248,1,65,15,182,174,233,193,252,237,
  235,131,229,1,1,252,235,252,233,244,27,248,75,129,252,248,239,15,130,244,
  55,129,122,253,12,239,15,133,244,55,255,139,106,4,137,106,12,199,66,4,237,
  139,42,139,90,8,137,106,8,137,26,141,74,16,131,232,2,187,237,252,233,244,
  1,248,76,129,252,248,239,15,130,244,55,139,42,139,90,252,252,137,92,36,28,
  137,44,36,129,122,253,4,239,15,133,244,55,72,131,189,233,0,15,133,244,55,
  128,189,233,235,15,135,244,55,139,141,233,15,132,244,247,255,59,141,233,15,
  132,244,55,248,1,141,92,193,252,240,59,157,233,15,135,244,55,137,157,233,
  139,108,36,24,137,149,233,131,194,8,137,149,233,141,108,194,232,72,41,221,
  57,203,15,132,244,249,248,2,72,139,4,43,72,137,67,252,248,131,252,235,8,57,
  203,15,133,244,2,248,3,137,206,139,60,36,232,244,24,65,199,134,233,237,255,
  139,108,36,24,139,28,36,139,149,233,129,252,248,239,15,135,244,254,248,4,
  139,139,233,68,139,187,233,137,139,233,68,137,252,251,41,203,15,132,244,252,
  141,4,26,193,252,235,3,59,133,233,15,135,244,255,137,213,72,41,205,248,5,
  72,139,1,72,137,4,41,131,193,8,68,57,252,249,15,133,244,5,248,6,141,67,2,
  199,66,252,252,237,248,7,139,92,36,28,137,68,36,4,72,199,193,252,248,252,
  255,252,255,252,255,252,247,195,237,255,15,132,244,13,252,233,244,14,248,
  8,199,66,252,252,237,139,139,233,131,252,233,8,137,139,233,72,139,1,72,137,
  2,184,237,252,233,244,7,248,9,139,12,36,68,137,185,233,137,222,137,252,239,
  232,251,1,0,139,28,36,139,149,233,252,233,244,4,248,77,139,106,252,248,139,
  173,233,139,90,252,252,137,92,36,28,137,44,36,72,131,189,233,0,15,133,244,
  55,255,128,189,233,235,15,135,244,55,139,141,233,15,132,244,247,59,141,233,
  15,132,244,55,248,1,141,92,193,252,248,59,157,233,15,135,244,55,137,157,233,
  139,108,36,24,137,149,233,137,149,233,141,108,194,252,240,72,41,221,57,203,
  15,132,244,249,248,2,255,72,139,4,43,72,137,67,252,248,131,252,235,8,57,203,
  15,133,244,2,248,3,137,206,139,60,36,232,244,24,65,199,134,233,237,139,108,
  36,24,139,28,36,139,149,233,129,252,248,239,15,135,244,254,248,4,139,139,
  233,68,139,187,233,137,139,233,68,137,252,251,41,203,15,132,244,252,141,4,
  26,193,252,235,3,59,133,233,15,135,244,255,255,137,213,72,41,205,248,5,72,
  139,1,72,137,4,41,131,193,8,68,57,252,249,15,133,244,5,248,6,141,67,1,248,
  7,139,92,36,28,137,68,36,4,49,201,252,247,195,237,15,132,244,13,252,233,244,
  14,248,8,137,222,137,252,239,232,251,1,13,248,9,139,12,36,68,137,185,233,
  137,222,137,252,239,232,251,1,0,139,28,36,139,149,233,252,233,244,4,248,78,
  139,108,36,24,72,252,247,133,233,237,15,132,244,55,255,137,149,233,141,68,
  194,252,248,137,133,233,49,192,72,137,133,233,176,235,136,133,233,252,233,
  244,16,255,248,64,139,90,252,252,221,90,252,248,252,233,244,58,248,79,129,
  252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,252,242,15,16,2,
  72,184,237,237,102,72,15,110,200,15,84,193,248,63,139,90,252,252,252,242,
  15,17,66,252,248,255,248,79,129,252,248,239,15,130,244,55,129,122,253,4,239,
  15,135,244,55,221,2,217,225,248,63,248,64,139,90,252,252,221,90,252,248,255,
  248,58,184,237,248,69,137,68,36,4,248,56,252,247,195,237,15,133,244,253,248,
  5,56,67,252,255,15,135,244,252,15,182,75,252,253,72,252,247,209,141,20,202,
  139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,252,255,36,252,238,248,
  6,199,68,194,252,244,237,131,192,1,252,233,244,5,248,7,72,199,193,252,248,
  252,255,252,255,252,255,252,233,244,14,255,248,80,129,252,248,239,15,130,
  244,55,129,122,253,4,239,15,135,244,55,252,242,15,81,2,252,233,244,63,248,
  81,129,252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,252,242,
  15,16,2,232,244,82,252,233,244,63,248,83,255,129,252,248,239,15,130,244,55,
  129,122,253,4,239,15,135,244,55,252,242,15,16,2,232,244,84,252,233,244,63,
  255,248,80,129,252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,
  221,2,217,252,250,252,233,244,64,248,81,129,252,248,239,15,130,244,55,129,
  122,253,4,239,15,135,244,55,221,2,232,244,82,252,233,244,64,248,83,255,129,
  252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,221,2,232,244,84,
  252,233,244,64,255,248,85,129,252,248,239,15,130,244,55,129,122,253,4,239,
  15,135,244,55,217,252,237,221,2,217,252,241,252,233,244,64,248,86,129,252,
  248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,217,252,236,221,2,217,
  252,241,252,233,244,64,248,87,129,252,248,239,255,15,130,244,55,129,122,253,
  4,239,15,135,244,55,221,2,232,244,88,252,233,244,64,248,89,129,252,248,239,
  15,130,244,55,129,122,253,4,239,15,135,244,55,221,2,217,252,254,252,233,244,
  64,248,90,129,252,248,239,255,15,130,244,55,129,122,253,4,239,15,135,244,
  55,221,2,217,252,255,252,233,244,64,248,91,129,252,248,239,15,130,244,55,
  129,122,253,4,239,15,135,244,55,221,2,217,252,242,221,216,252,233,244,64,
  248,92,129,252,248,239,15,130,244,55,255,129,122,253,4,239,15,135,244,55,
  221,2,217,192,216,200,217,232,222,225,217,252,250,217,252,243,252,233,244,
  64,248,93,129,252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,221,
  2,217,192,216,200,217,232,222,225,217,252,250,217,201,217,252,243,252,233,
  244,64,248,94,129,252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,
  55,255,221,2,217,232,217,252,243,252,233,244,64,255,248,95,129,252,248,239,
  15,130,244,55,129,122,253,4,239,15,135,244,55,252,242,15,16,2,255,137,213,
  232,251,1,14,137,252,234,252,233,244,63,255,248,96,129,252,248,239,15,130,
  244,55,129,122,253,4,239,15,135,244,55,252,242,15,16,2,255,137,213,232,251,
  1,15,137,252,234,252,233,244,63,255,248,97,129,252,248,239,15,130,244,55,
  129,122,253,4,239,15,135,244,55,252,242,15,16,2,255,137,213,232,251,1,16,
  137,252,234,252,233,244,63,248,98,255,248,99,129,252,248,239,15,130,244,55,
  129,122,253,4,239,15,135,244,55,252,242,15,16,2,139,106,252,248,252,242,15,
  89,133,233,252,233,244,63,255,248,99,129,252,248,239,15,130,244,55,129,122,
  253,4,239,15,135,244,55,221,2,139,106,252,248,220,141,233,252,233,244,64,
  255,248,100,129,252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,
  129,122,253,12,239,15,135,244,55,221,2,221,66,8,217,252,243,252,233,244,64,
  248,101,129,252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,129,
  122,253,12,239,255,15,135,244,55,221,66,8,221,2,217,252,253,221,217,252,233,
  244,64,248,102,129,252,248,239,15,130,244,55,139,106,4,129,252,253,239,15,
  135,244,55,139,90,252,252,139,2,137,106,252,252,137,66,252,248,209,229,129,
  252,253,0,0,224,252,255,15,131,244,249,9,232,15,132,244,249,184,252,254,3,
  0,0,129,252,253,0,0,32,0,15,130,244,250,248,1,193,252,237,21,41,197,255,252,
  242,15,42,197,255,137,44,36,219,4,36,255,139,106,252,252,129,229,252,255,
  252,255,15,128,129,205,0,0,224,63,137,106,252,252,248,2,255,252,242,15,17,
  2,255,221,26,255,184,237,252,233,244,69,248,3,255,15,87,192,252,233,244,2,
  255,217,252,238,252,233,244,2,255,248,4,255,252,242,15,16,2,72,189,237,237,
  102,72,15,110,205,252,242,15,89,193,252,242,15,17,66,252,248,255,221,2,199,
  4,36,0,0,128,90,216,12,36,221,90,252,248,255,139,106,252,252,184,52,4,0,0,
  209,229,252,233,244,1,255,248,103,129,252,248,239,15,130,244,55,129,122,253,
  4,239,15,135,244,55,252,242,15,16,2,255,248,103,129,252,248,239,15,130,244,
  55,129,122,253,4,239,15,135,244,55,221,2,255,139,106,4,139,90,252,252,209,
  229,129,252,253,0,0,224,252,255,15,132,244,250,255,15,40,224,232,244,104,
  252,242,15,92,224,248,1,252,242,15,17,66,252,248,252,242,15,17,34,255,217,
  192,232,244,104,220,252,233,248,1,221,90,252,248,221,26,255,139,66,252,252,
  139,106,4,49,232,15,136,244,249,248,2,184,237,252,233,244,69,248,3,129,252,
  245,0,0,0,128,137,106,4,252,233,244,2,248,4,255,15,87,228,252,233,244,1,255,
  217,252,238,217,201,252,233,244,1,255,248,105,129,252,248,239,15,130,244,
  55,129,122,253,4,239,15,135,244,55,129,122,253,12,239,15,135,244,55,221,66,
  8,221,2,248,1,217,252,248,223,224,158,15,138,244,1,221,217,252,233,244,64,
  255,248,106,129,252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,
  129,122,253,12,239,15,135,244,55,252,242,15,16,2,252,242,15,16,74,8,232,244,
  107,252,233,244,63,255,248,106,129,252,248,239,15,130,244,55,129,122,253,
  4,239,15,135,244,55,129,122,253,12,239,15,135,244,55,221,2,221,66,8,232,244,
  107,252,233,244,64,255,248,108,129,252,248,239,15,130,244,55,129,122,253,
  4,239,15,135,244,55,252,242,15,16,2,189,2,0,0,0,248,1,57,197,15,131,244,63,
  129,124,253,252,234,252,252,239,15,135,244,55,252,242,15,16,76,252,234,252,
  248,252,242,15,93,193,131,197,1,252,233,244,1,255,248,109,129,252,248,239,
  15,130,244,55,129,122,253,4,239,15,135,244,55,252,242,15,16,2,189,2,0,0,0,
  248,1,57,197,15,131,244,63,129,124,253,252,234,252,252,239,15,135,244,55,
  252,242,15,16,76,252,234,252,248,252,242,15,95,193,131,197,1,252,233,244,
  1,255,248,5,221,216,252,233,244,55,255,248,110,129,252,248,239,15,130,244,
  55,129,122,253,4,239,15,133,244,55,139,42,255,252,242,15,42,133,233,252,233,
  244,63,255,219,133,233,252,233,244,64,255,248,111,129,252,248,239,15,133,
  244,55,129,122,253,4,239,15,133,244,55,139,42,139,90,252,252,131,189,233,
  1,15,130,244,72,15,182,173,233,255,252,242,15,42,197,252,233,244,63,255,137,
  44,36,219,4,36,252,233,244,64,255,248,112,65,139,174,233,65,59,174,233,15,
  130,244,247,232,244,66,248,1,129,252,248,239,15,133,244,55,129,122,253,4,
  239,15,135,244,55,255,252,242,15,44,42,129,252,253,252,255,0,0,0,15,135,244,
  55,137,108,36,4,255,221,2,219,92,36,4,129,124,36,4,252,255,0,0,0,15,135,244,
  55,255,199,68,36,8,1,0,0,0,72,141,68,36,4,248,113,139,108,36,24,137,149,233,
  139,84,36,8,72,137,198,137,252,239,137,92,36,28,232,251,1,17,139,149,233,
  139,90,252,252,199,66,252,252,237,137,66,252,248,252,233,244,58,248,114,65,
  139,174,233,65,59,174,233,15,130,244,247,232,244,66,248,1,199,68,36,4,252,
  255,252,255,252,255,252,255,129,252,248,239,15,130,244,55,15,134,244,247,
  129,122,253,20,239,255,252,242,15,44,106,16,137,108,36,4,255,221,66,16,219,
  92,36,4,255,248,1,129,122,253,4,239,15,133,244,55,129,122,253,12,239,15,135,
  244,55,139,42,137,108,36,8,139,173,233,255,252,242,15,44,74,8,255,139,68,
  36,4,57,197,15,130,244,251,248,2,133,201,15,142,244,253,248,3,139,108,36,
  8,41,200,15,140,244,115,141,172,253,13,233,131,192,1,248,4,137,68,36,8,137,
  232,252,233,244,113,248,5,15,140,244,252,141,68,40,1,252,233,244,2,248,6,
  137,232,252,233,244,2,248,7,255,15,132,244,254,1,252,233,131,193,1,15,143,
  244,3,248,8,185,1,0,0,0,252,233,244,3,248,115,49,192,252,233,244,4,248,116,
  129,252,248,239,15,130,244,55,65,139,174,233,65,59,174,233,15,130,244,247,
  232,244,66,248,1,255,129,122,253,4,239,15,133,244,55,129,122,253,12,239,15,
  135,244,55,139,42,255,252,242,15,44,66,8,255,221,66,8,219,92,36,4,139,68,
  36,4,255,133,192,15,142,244,115,131,189,233,1,15,130,244,115,15,133,244,117,
  65,57,134,233,15,130,244,117,15,182,141,233,65,139,174,233,137,68,36,8,248,
  1,136,77,0,131,197,1,131,232,1,15,133,244,1,65,139,134,233,252,233,244,113,
  248,118,129,252,248,239,255,15,130,244,55,65,139,174,233,65,59,174,233,15,
  130,244,247,232,244,66,248,1,129,122,253,4,239,15,133,244,55,139,42,139,133,
  233,133,192,15,132,244,115,65,57,134,233,15,130,244,119,129,197,239,137,92,
  36,4,137,68,36,8,65,139,158,233,248,1,255,15,182,77,0,131,197,1,131,232,1,
  136,12,3,15,133,244,1,137,216,139,92,36,4,252,233,244,113,248,120,129,252,
  248,239,15,130,244,55,65,139,174,233,65,59,174,233,15,130,244,247,232,244,
  66,248,1,129,122,253,4,239,15,133,244,55,139,42,139,133,233,65,57,134,233,
  255,15,130,244,119,129,197,239,137,92,36,4,137,68,36,8,65,139,158,233,252,
  233,244,249,248,1,15,182,76,5,0,131,252,249,65,15,130,244,248,131,252,249,
  90,15,135,244,248,131,252,241,32,248,2,136,12,3,248,3,131,232,1,15,137,244,
  1,137,216,139,92,36,4,252,233,244,113,248,121,129,252,248,239,15,130,244,
  55,255,65,139,174,233,65,59,174,233,15,130,244,247,232,244,66,248,1,129,122,
  253,4,239,15,133,244,55,139,42,139,133,233,65,57,134,233,15,130,244,119,129,
  197,239,137,92,36,4,137,68,36,8,65,139,158,233,252,233,244,249,248,1,15,182,
  76,5,0,131,252,249,97,15,130,244,248,255,131,252,249,122,15,135,244,248,131,
  252,241,32,248,2,136,12,3,248,3,131,232,1,15,137,244,1,137,216,139,92,36,
  4,252,233,244,113,248,122,129,252,248,239,15,130,244,55,129,122,253,4,239,
  15,133,244,55,137,213,139,58,232,251,1,18,137,252,234,255,252,242,15,42,192,
  252,233,244,63,255,248,123,129,252,248,239,15,130,244,55,129,122,253,4,239,
  15,135,244,55,252,242,15,16,2,72,189,237,237,102,72,15,110,205,252,242,15,
  88,193,102,15,126,197,252,242,15,42,197,252,233,244,63,255,248,124,129,252,
  248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,252,242,15,16,2,72,
  189,237,237,102,72,15,110,205,252,242,15,88,193,102,15,126,197,255,137,68,
  36,4,141,68,194,252,240,248,1,57,208,15,134,244,125,129,120,253,4,239,15,
  135,244,126,255,252,242,15,16,0,252,242,15,88,193,102,15,126,193,33,205,255,
  131,232,8,252,233,244,1,255,248,127,129,252,248,239,15,130,244,55,129,122,
  253,4,239,15,135,244,55,252,242,15,16,2,72,189,237,237,102,72,15,110,205,
  252,242,15,88,193,102,15,126,197,255,252,242,15,16,0,252,242,15,88,193,102,
  15,126,193,9,205,255,248,128,129,252,248,239,15,130,244,55,129,122,253,4,
  239,15,135,244,55,252,242,15,16,2,72,189,237,237,102,72,15,110,205,252,242,
  15,88,193,102,15,126,197,255,252,242,15,16,0,252,242,15,88,193,102,15,126,
  193,49,205,255,248,129,129,252,248,239,15,130,244,55,129,122,253,4,239,15,
  135,244,55,252,242,15,16,2,72,189,237,237,102,72,15,110,205,252,242,15,88,
  193,102,15,126,197,255,15,205,252,233,244,125,255,248,130,129,252,248,239,
  15,130,244,55,129,122,253,4,239,15,135,244,55,252,242,15,16,2,72,189,237,
  237,102,72,15,110,205,252,242,15,88,193,102,15,126,197,255,252,247,213,255,
  248,125,252,242,15,42,197,252,233,244,63,255,248,126,139,68,36,4,252,233,
  244,55,255,248,131,129,252,248,239,15,130,244,55,129,122,253,4,239,15,135,
  244,55,129,122,253,12,239,15,135,244,55,252,242,15,16,2,252,242,15,16,74,
  8,72,189,237,237,102,72,15,110,213,252,242,15,88,194,252,242,15,88,202,137,
  200,102,15,126,197,102,15,126,201,255,211,229,137,193,252,233,244,125,255,
  248,132,129,252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,129,
  122,253,12,239,15,135,244,55,252,242,15,16,2,252,242,15,16,74,8,72,189,237,
  237,102,72,15,110,213,252,242,15,88,194,252,242,15,88,202,137,200,102,15,
  126,197,102,15,126,201,255,211,252,237,137,193,252,233,244,125,255,248,133,
  129,252,248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,129,122,253,
  12,239,15,135,244,55,252,242,15,16,2,252,242,15,16,74,8,72,189,237,237,102,
  72,15,110,213,252,242,15,88,194,252,242,15,88,202,137,200,102,15,126,197,
  102,15,126,201,255,211,252,253,137,193,252,233,244,125,255,248,134,129,252,
  248,239,15,130,244,55,129,122,253,4,239,15,135,244,55,129,122,253,12,239,
  15,135,244,55,252,242,15,16,2,252,242,15,16,74,8,72,189,237,237,102,72,15,
  110,213,252,242,15,88,194,252,242,15,88,202,137,200,102,15,126,197,102,15,
  126,201,255,211,197,137,193,252,233,244,125,255,248,135,129,252,248,239,15,
  130,244,55,129,122,253,4,239,15,135,244,55,129,122,253,12,239,15,135,244,
  55,252,242,15,16,2,252,242,15,16,74,8,72,189,237,237,102,72,15,110,213,252,
  242,15,88,194,252,242,15,88,202,137,200,102,15,126,197,102,15,126,201,255,
  211,205,137,193,252,233,244,125,248,117,184,237,252,233,244,55,248,119,184,
  237,248,55,139,108,36,24,139,90,252,252,137,92,36,28,137,149,233,141,68,194,
  252,248,141,136,233,137,133,233,139,66,252,248,59,141,233,15,135,244,251,
  137,252,239,252,255,144,233,139,149,233,133,192,15,143,244,69,248,1,255,139,
  141,233,41,209,193,252,233,3,133,192,141,65,1,139,106,252,248,15,133,244,
  248,139,157,233,139,11,15,182,252,233,15,182,205,131,195,4,65,252,255,36,
  252,238,248,2,137,209,252,247,195,237,15,133,244,249,15,182,107,252,253,72,
  252,247,213,141,20,252,234,252,233,244,27,248,3,137,221,131,229,252,248,41,
  252,234,252,233,244,27,248,5,190,237,137,252,239,232,251,1,0,139,149,233,
  49,192,252,233,244,1,248,66,93,72,137,108,36,8,139,108,36,24,137,92,36,28,
  137,149,233,255,141,68,194,252,248,137,252,239,137,133,233,232,251,1,19,139,
  149,233,139,133,233,41,208,193,232,3,131,192,1,72,139,108,36,8,85,195,248,
  136,255,65,15,182,134,233,168,235,15,133,244,251,168,235,15,133,244,247,168,
  235,15,132,244,247,65,252,255,142,233,252,233,244,247,255,248,137,65,15,182,
  134,233,168,235,15,133,244,251,252,233,244,247,248,138,65,15,182,134,233,
  168,235,15,133,244,251,168,235,15,132,244,251,65,252,255,142,233,15,132,244,
  247,168,235,15,132,244,251,248,1,255,139,108,36,24,137,149,233,137,222,137,
  252,239,232,251,1,20,248,3,139,149,233,248,4,15,182,75,252,253,248,5,15,182,
  107,252,252,15,183,67,252,254,65,252,255,164,253,252,238,233,248,139,131,
  195,4,139,77,232,137,76,36,4,252,233,244,4,248,140,255,139,106,252,248,139,
  173,233,15,182,133,233,141,4,194,139,108,36,24,137,149,233,137,133,233,137,
  222,65,141,190,233,73,137,174,233,137,92,36,28,232,251,1,21,252,233,244,3,
  255,248,141,137,92,36,28,255,248,142,255,137,92,36,28,131,203,1,248,1,255,
  141,68,194,252,248,139,108,36,24,137,149,233,137,133,233,137,222,137,252,
  239,232,251,1,22,199,68,36,28,0,0,0,0,255,131,227,252,254,255,139,149,233,
  72,137,193,139,133,233,41,208,72,137,205,15,182,75,252,253,193,232,3,131,
  192,1,252,255,229,248,143,255,65,85,65,84,65,83,65,82,65,81,65,80,87,86,85,
  72,141,108,36,88,85,83,82,81,80,15,182,69,252,248,138,101,252,240,76,137,
  125,252,248,76,137,117,252,240,68,139,117,0,65,139,142,233,65,199,134,233,
  237,65,137,134,233,65,137,142,233,72,129,252,236,239,72,131,197,128,252,242,
  68,15,17,125,252,248,252,242,68,15,17,117,252,240,252,242,68,15,17,109,232,
  252,242,68,15,17,101,224,252,242,68,15,17,93,216,252,242,68,15,17,85,208,
  252,242,68,15,17,77,200,252,242,68,15,17,69,192,252,242,15,17,125,184,252,
  242,15,17,117,176,252,242,15,17,109,168,252,242,15,17,101,160,252,242,15,
  17,93,152,252,242,15,17,85,144,252,242,15,17,77,136,252,242,15,17,69,128,
  65,139,174,233,65,139,150,233,73,137,174,233,65,199,134,233,0,0,0,0,137,149,
  233,72,137,230,65,141,190,233,232,251,1,23,72,139,141,233,72,129,225,239,
  72,137,204,137,169,233,139,149,233,139,153,233,252,233,244,247,255,248,144,
  255,72,131,196,16,248,1,76,139,108,36,8,76,139,36,36,133,192,15,136,244,249,
  137,68,36,4,68,139,122,252,248,69,139,191,233,69,139,191,233,65,199,134,233,
  0,0,0,0,65,199,134,233,237,139,3,15,182,204,15,182,232,131,195,4,193,232,
  16,129,252,253,239,15,130,244,248,139,68,36,4,248,2,65,252,255,36,252,238,
  248,3,252,247,216,137,252,239,137,198,232,251,1,24,255,248,82,255,217,124,
  36,4,137,68,36,8,102,184,0,4,102,11,68,36,4,102,37,252,255,252,247,102,137,
  68,36,6,217,108,36,6,217,252,252,217,108,36,4,139,68,36,8,195,255,248,145,
  72,184,237,237,102,72,15,110,208,72,184,237,237,102,72,15,110,216,15,40,200,
  102,15,84,202,102,15,46,217,15,134,244,247,102,15,85,208,252,242,15,88,203,
  252,242,15,92,203,102,15,86,202,72,184,237,237,102,72,15,110,208,252,242,
  15,194,193,1,102,15,84,194,252,242,15,92,200,15,40,193,248,1,195,248,84,255,
  217,124,36,4,137,68,36,8,102,184,0,8,102,11,68,36,4,102,37,252,255,252,251,
  102,137,68,36,6,217,108,36,6,217,252,252,217,108,36,4,139,68,36,8,195,255,
  248,146,72,184,237,237,102,72,15,110,208,72,184,237,237,102,72,15,110,216,
  15,40,200,102,15,84,202,102,15,46,217,15,134,244,247,102,15,85,208,252,242,
  15,88,203,252,242,15,92,203,102,15,86,202,72,184,237,237,102,72,15,110,208,
  252,242,15,194,193,6,102,15,84,194,252,242,15,92,200,15,40,193,248,1,195,
  248,104,255,217,124,36,4,137,68,36,8,102,184,0,12,102,11,68,36,4,102,137,
  68,36,6,217,108,36,6,217,252,252,217,108,36,4,139,68,36,8,195,255,248,147,
  72,184,237,237,102,72,15,110,208,72,184,237,237,102,72,15,110,216,15,40,200,
  102,15,84,202,102,15,46,217,15,134,244,247,102,15,85,208,15,40,193,252,242,
  15,88,203,252,242,15,92,203,72,184,237,237,102,72,15,110,216,252,242,15,194,
  193,1,102,15,84,195,252,242,15,92,200,102,15,86,202,15,40,193,248,1,195,248,
  148,255,15,40,232,252,242,15,94,193,72,184,237,237,102,72,15,110,208,72,184,
  237,237,102,72,15,110,216,15,40,224,102,15,84,226,102,15,46,220,15,134,244,
  247,102,15,85,208,252,242,15,88,227,252,242,15,92,227,102,15,86,226,72,184,
  237,237,102,72,15,110,208,252,242,15,194,196,1,102,15,84,194,252,242,15,92,
  224,15,40,197,252,242,15,89,204,252,242,15,92,193,195,248,1,252,242,15,89,
  200,15,40,197,252,242,15,92,193,195,255,217,193,216,252,241,217,124,36,4,
  102,184,0,4,102,11,68,36,4,102,37,252,255,252,247,102,137,68,36,6,217,108,
  36,6,217,252,252,217,108,36,4,222,201,222,252,233,195,255,248,88,217,252,
  234,222,201,248,149,217,84,36,252,248,129,124,36,252,248,0,0,128,127,15,132,
  244,247,129,124,36,252,248,0,0,128,252,255,15,132,244,248,248,150,217,192,
  217,252,252,220,252,233,217,201,217,252,240,217,232,222,193,217,252,253,221,
  217,248,1,195,248,2,221,216,217,252,238,195,255,248,107,255,248,151,252,242,
  15,45,193,252,242,15,42,208,102,15,46,202,15,133,244,254,15,138,244,255,248,
  152,131,252,248,1,15,142,244,252,248,1,169,1,0,0,0,15,133,244,248,252,242,
  15,89,192,209,232,252,233,244,1,248,2,209,232,15,132,244,251,15,40,200,248,
  3,252,242,15,89,192,209,232,15,132,244,250,15,131,244,3,255,252,242,15,89,
  200,252,233,244,3,248,4,252,242,15,89,193,248,5,195,248,6,15,132,244,5,15,
  130,244,253,80,72,184,237,237,102,72,15,110,200,252,242,15,94,200,88,15,40,
  193,252,247,216,131,252,248,1,15,132,244,5,252,233,244,1,248,7,72,184,237,
  237,102,72,15,110,192,195,248,8,102,72,15,126,200,72,209,224,72,193,192,12,
  72,61,252,254,15,0,0,15,132,244,248,255,102,72,15,126,192,72,209,224,15,132,
  244,250,72,193,192,12,72,61,252,254,15,0,0,15,132,244,251,252,242,15,17,76,
  36,252,240,252,242,15,17,68,36,252,248,221,68,36,252,240,221,68,36,252,248,
  217,252,241,217,192,217,252,252,220,252,233,217,201,217,252,240,217,232,222,
  193,217,252,253,221,217,221,92,36,252,248,252,242,15,16,68,36,252,248,195,
  248,9,72,184,237,237,102,72,15,110,208,102,15,46,194,15,132,244,247,15,40,
  193,248,1,195,248,2,72,184,237,237,102,72,15,110,208,102,15,84,194,72,184,
  237,237,102,72,15,110,208,102,15,46,194,15,132,244,1,102,15,80,193,15,87,
  192,136,196,15,146,208,48,224,15,133,244,1,248,3,72,184,237,237,255,102,72,
  15,110,192,195,248,4,102,15,80,193,133,192,15,133,244,3,15,87,192,195,248,
  5,102,15,80,193,133,192,15,132,244,3,15,87,192,195,248,153,255,131,252,255,
  1,15,130,244,82,15,132,244,84,131,252,255,3,15,130,244,104,15,135,244,248,
  252,242,15,81,192,195,248,2,252,242,15,17,68,36,252,248,221,68,36,252,248,
  131,252,255,5,15,135,244,248,15,132,244,247,232,244,88,252,233,244,253,248,
  1,232,244,149,255,252,233,244,253,248,2,131,252,255,7,15,132,244,247,15,135,
  244,248,217,252,237,217,201,217,252,241,252,233,244,253,248,1,217,232,217,
  201,217,252,241,252,233,244,253,248,2,131,252,255,9,15,132,244,247,15,135,
  244,248,217,252,236,217,201,217,252,241,252,233,244,253,248,1,255,217,252,
  254,252,233,244,253,248,2,131,252,255,11,15,132,244,247,15,135,244,255,217,
  252,255,252,233,244,253,248,1,217,252,242,221,216,248,7,221,92,36,252,248,
  252,242,15,16,68,36,252,248,195,255,139,124,36,12,221,68,36,4,131,252,255,
  1,15,130,244,82,15,132,244,84,131,252,255,3,15,130,244,104,15,135,244,248,
  217,252,250,195,248,2,131,252,255,5,15,130,244,88,15,132,244,149,131,252,
  255,7,15,132,244,247,15,135,244,248,217,252,237,217,201,217,252,241,195,248,
  1,217,232,217,201,217,252,241,195,248,2,131,252,255,9,15,132,244,247,255,
  15,135,244,248,217,252,236,217,201,217,252,241,195,248,1,217,252,254,195,
  248,2,131,252,255,11,15,132,244,247,15,135,244,255,217,252,255,195,248,1,
  217,252,242,221,216,195,255,248,9,204,255,248,154,255,131,252,255,1,15,132,
  244,247,15,135,244,248,252,242,15,88,193,195,248,1,252,242,15,92,193,195,
  248,2,131,252,255,3,15,132,244,247,15,135,244,248,252,242,15,89,193,195,248,
  1,252,242,15,94,193,195,248,2,131,252,255,5,15,130,244,148,15,132,244,107,
  131,252,255,7,15,132,244,247,15,135,244,248,72,184,237,237,255,102,72,15,
  110,200,15,87,193,195,248,1,72,184,237,237,102,72,15,110,200,15,84,193,195,
  248,2,131,252,255,9,15,135,244,248,252,242,15,17,68,36,252,248,252,242,15,
  17,76,36,252,240,221,68,36,252,248,221,68,36,252,240,15,132,244,247,217,252,
  243,248,7,221,92,36,252,248,252,242,15,16,68,36,252,248,195,248,1,217,201,
  217,252,253,221,217,252,233,244,7,248,2,131,252,255,11,15,132,244,247,15,
  135,244,255,252,242,15,93,193,195,248,1,252,242,15,95,193,195,248,9,204,255,
  139,68,36,20,221,68,36,4,221,68,36,12,131,252,248,1,15,132,244,247,15,135,
  244,248,222,193,195,248,1,222,252,233,195,248,2,131,252,248,3,15,132,244,
  247,15,135,244,248,222,201,195,248,1,222,252,249,195,248,2,131,252,248,5,
  15,130,244,148,15,132,244,107,131,252,248,7,15,132,244,247,15,135,244,248,
  255,221,216,217,224,195,248,1,221,216,217,225,195,248,2,131,252,248,9,15,
  132,244,247,15,135,244,248,217,252,243,195,248,1,217,201,217,252,253,221,
  217,195,248,2,131,252,248,11,15,132,244,247,15,135,244,255,255,219,252,233,
  219,209,221,217,195,248,1,219,252,233,218,209,221,217,195,255,221,225,223,
  224,252,246,196,1,15,132,244,248,217,201,248,2,221,216,195,248,1,221,225,
  223,224,252,246,196,1,15,133,244,248,217,201,248,2,221,216,195,255,248,155,
  137,252,248,83,15,162,137,6,137,94,4,137,78,8,137,86,12,91,195,255,129,124,
  253,202,4,239,15,135,244,41,129,124,253,194,4,239,15,135,244,41,255,252,242,
  15,16,4,194,131,195,4,102,15,46,4,202,255,221,4,202,221,4,194,131,195,4,255,
  223,252,233,221,216,255,218,252,233,223,224,158,255,15,134,244,248,255,15,
  131,244,248,255,248,1,15,183,67,252,254,141,156,253,131,233,248,2,139,3,15,
  182,204,15,182,232,131,195,4,193,232,16,65,252,255,36,252,238,255,139,108,
  194,4,131,195,4,129,252,253,239,15,135,244,251,129,124,253,202,4,239,15,135,
  244,251,255,252,242,15,16,4,194,102,15,46,4,202,255,221,4,202,221,4,194,255,
  15,138,244,248,15,133,244,248,255,15,138,244,248,15,132,244,247,255,248,1,
  15,183,67,252,254,141,156,253,131,233,248,2,255,248,2,15,183,67,252,254,141,
  156,253,131,233,248,1,255,248,5,57,108,202,4,15,133,244,2,129,252,253,239,
  15,131,244,1,139,12,202,139,4,194,57,193,15,132,244,1,129,252,253,239,15,
  135,244,2,139,169,233,133,252,237,15,132,244,2,252,246,133,233,235,15,133,
  244,2,255,49,252,237,255,189,1,0,0,0,255,252,233,244,45,255,72,252,247,208,
  131,195,4,129,124,253,202,4,239,15,133,244,248,139,12,202,65,59,12,135,255,
  131,195,4,129,124,253,202,4,239,15,135,244,248,255,252,242,65,15,16,4,199,
  102,15,46,4,202,255,221,4,202,65,221,4,199,255,72,252,247,208,131,195,4,57,
  68,202,4,255,139,108,194,4,131,195,4,129,252,253,239,255,15,131,244,247,255,
  15,130,244,247,255,137,108,202,4,139,44,194,137,44,202,255,15,183,67,252,
  254,141,156,253,131,233,248,1,139,3,15,182,204,15,182,232,131,195,4,193,232,
  16,65,252,255,36,252,238,255,72,139,44,194,72,137,44,202,139,3,15,182,204,
  15,182,232,131,195,4,193,232,16,65,252,255,36,252,238,255,49,252,237,129,
  124,253,194,4,239,129,213,239,137,108,202,4,139,3,15,182,204,15,182,232,131,
  195,4,193,232,16,65,252,255,36,252,238,255,129,124,253,194,4,239,15,135,244,
  48,255,252,242,15,16,4,194,72,184,237,237,102,72,15,110,200,15,87,193,252,
  242,15,17,4,202,255,221,4,194,217,224,221,28,202,255,129,124,253,194,4,239,
  15,133,244,248,139,4,194,255,15,87,192,252,242,15,42,128,233,248,1,252,242,
  15,17,4,202,255,219,128,233,248,1,221,28,202,255,139,3,15,182,204,15,182,
  232,131,195,4,193,232,16,65,252,255,36,252,238,248,2,129,124,253,194,4,239,
  15,133,244,50,139,60,194,137,213,232,251,1,18,255,252,242,15,42,192,137,252,
  234,255,15,182,75,252,253,252,233,244,1,255,15,182,252,236,15,182,192,255,
  129,124,253,252,234,4,239,15,135,244,46,255,252,242,15,16,4,252,234,252,242,
  65,15,88,4,199,255,221,4,252,234,65,220,4,199,255,129,124,253,252,234,4,239,
  15,135,244,47,255,252,242,65,15,16,4,199,252,242,15,88,4,252,234,255,65,221,
  4,199,220,4,252,234,255,129,124,253,252,234,4,239,15,135,244,49,129,124,253,
  194,4,239,15,135,244,49,255,252,242,15,16,4,252,234,252,242,15,88,4,194,255,
  221,4,252,234,220,4,194,255,252,242,15,16,4,252,234,252,242,65,15,92,4,199,
  255,221,4,252,234,65,220,36,199,255,252,242,65,15,16,4,199,252,242,15,92,
  4,252,234,255,65,221,4,199,220,36,252,234,255,252,242,15,16,4,252,234,252,
  242,15,92,4,194,255,221,4,252,234,220,36,194,255,252,242,15,16,4,252,234,
  252,242,65,15,89,4,199,255,221,4,252,234,65,220,12,199,255,252,242,65,15,
  16,4,199,252,242,15,89,4,252,234,255,65,221,4,199,220,12,252,234,255,252,
  242,15,16,4,252,234,252,242,15,89,4,194,255,221,4,252,234,220,12,194,255,
  252,242,15,16,4,252,234,252,242,65,15,94,4,199,255,221,4,252,234,65,220,52,
  199,255,252,242,65,15,16,4,199,252,242,15,94,4,252,234,255,65,221,4,199,220,
  52,252,234,255,252,242,15,16,4,252,234,252,242,15,94,4,194,255,221,4,252,
  234,220,52,194,255,252,242,15,16,4,252,234,252,242,65,15,16,12,199,255,221,
  4,252,234,65,221,4,199,255,252,242,65,15,16,4,199,252,242,15,16,12,252,234,
  255,65,221,4,199,221,4,252,234,255,252,242,15,16,4,252,234,252,242,15,16,
  12,194,255,221,4,252,234,221,4,194,255,248,156,232,244,148,255,252,233,244,
  156,255,232,244,107,255,15,182,252,236,15,182,192,139,124,36,24,137,151,233,
  141,52,194,137,194,41,252,234,248,33,137,252,253,137,92,36,28,232,251,1,25,
  139,149,233,133,192,15,133,244,42,15,182,107,252,255,15,182,75,252,253,72,
  139,4,252,234,72,137,4,202,139,3,15,182,204,15,182,232,131,195,4,193,232,
  16,65,252,255,36,252,238,255,72,252,247,208,65,139,4,135,199,68,202,4,237,
  137,4,202,139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,252,255,36,
  252,238,255,15,191,192,252,242,15,42,192,252,242,15,17,4,202,255,223,67,252,
  254,221,28,202,255,252,242,65,15,16,4,199,252,242,15,17,4,202,255,65,221,
  4,199,221,28,202,255,72,252,247,208,137,68,202,4,139,3,15,182,204,15,182,
  232,131,195,4,193,232,16,65,252,255,36,252,238,255,141,76,202,12,141,68,194,
  4,189,237,137,105,252,248,248,1,137,41,131,193,8,57,193,15,134,244,1,139,
  3,15,182,204,15,182,232,131,195,4,193,232,16,65,252,255,36,252,238,255,139,
  106,252,248,139,172,253,133,233,139,173,233,72,139,69,0,72,137,4,202,139,
  3,15,182,204,15,182,232,131,195,4,193,232,16,65,252,255,36,252,238,255,139,
  106,252,248,139,172,253,141,233,128,189,233,0,139,173,233,139,12,194,139,
  68,194,4,137,77,0,137,69,4,15,132,244,247,252,246,133,233,235,15,133,244,
  248,248,1,139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,252,255,36,
  252,238,248,2,129,232,239,129,252,248,239,15,134,244,1,252,246,129,233,235,
  15,132,244,1,137,252,238,137,213,65,141,190,233,255,232,251,1,26,137,252,
  234,252,233,244,1,255,72,252,247,208,139,106,252,248,139,172,253,141,233,
  65,139,12,135,139,133,233,137,8,199,64,4,237,252,246,133,233,235,15,133,244,
  248,248,1,139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,252,255,36,
  252,238,248,2,252,246,129,233,235,15,132,244,1,128,189,233,0,15,132,244,1,
  137,213,137,198,65,141,190,233,232,251,1,26,137,252,234,252,233,244,1,255,
  139,106,252,248,255,252,242,65,15,16,4,199,255,139,172,253,141,233,139,141,
  233,255,252,242,15,17,1,255,221,25,255,72,252,247,208,139,106,252,248,139,
  172,253,141,233,139,141,233,137,65,4,139,3,15,182,204,15,182,232,131,195,
  4,193,232,16,65,252,255,36,252,238,255,141,156,253,131,233,139,108,36,24,
  131,189,233,0,15,132,244,247,137,149,233,141,52,202,137,252,239,232,251,1,
  27,139,149,233,248,1,139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,
  252,255,36,252,238,255,72,252,247,208,139,108,36,24,137,149,233,139,82,252,
  248,65,139,52,135,137,252,239,137,92,36,28,232,251,1,28,139,149,233,15,182,
  75,252,253,137,4,202,199,68,202,4,237,139,3,15,182,204,15,182,232,131,195,
  4,193,232,16,65,252,255,36,252,238,255,139,108,36,24,137,149,233,65,139,142,
  233,65,59,142,233,137,92,36,28,15,131,244,251,248,1,137,194,37,252,255,7,
  0,0,193,252,234,11,61,252,255,7,0,0,15,132,244,249,248,2,137,252,239,137,
  198,232,251,1,29,139,149,233,15,182,75,252,253,137,4,202,199,68,202,4,237,
  139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,252,255,36,252,238,248,
  3,184,1,8,0,0,252,233,244,2,248,5,137,252,239,232,251,1,30,15,183,67,252,
  254,252,233,244,1,255,72,252,247,208,139,108,36,24,65,139,142,233,137,92,
  36,28,65,59,142,233,137,149,233,15,131,244,249,248,2,65,139,52,135,137,252,
  239,232,251,1,31,139,149,233,15,182,75,252,253,137,4,202,199,68,202,4,237,
  139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,252,255,36,252,238,248,
  3,137,252,239,232,251,1,30,15,183,67,252,254,72,252,247,208,252,233,244,2,
  255,72,252,247,208,139,106,252,248,139,173,233,65,139,4,135,252,233,244,157,
  255,72,252,247,208,139,106,252,248,139,173,233,65,139,4,135,252,233,244,158,
  255,15,182,252,236,15,182,192,129,124,253,252,234,4,239,15,133,244,36,139,
  44,252,234,129,124,253,194,4,239,15,135,244,251,255,252,242,15,16,4,194,252,
  242,15,45,192,252,242,15,42,200,102,15,46,193,255,15,133,244,36,59,133,233,
  15,131,244,36,193,224,3,3,133,233,129,120,253,4,239,15,132,244,248,72,139,
  40,72,137,44,202,248,1,139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,
  252,255,36,252,238,248,2,131,189,233,0,15,132,244,249,139,141,233,252,246,
  129,233,235,15,132,244,36,15,182,75,252,253,248,3,255,199,68,202,4,237,252,
  233,244,1,248,5,129,124,253,194,4,239,15,133,244,36,139,4,194,252,233,244,
  157,255,15,182,252,236,15,182,192,72,252,247,208,65,139,4,135,129,124,253,
  252,234,4,239,15,133,244,34,139,44,252,234,248,157,139,141,233,35,136,233,
  105,201,239,3,141,233,248,1,129,185,233,239,15,133,244,250,57,129,233,15,
  133,244,250,129,121,253,4,239,15,132,244,251,15,182,67,252,253,72,139,41,
  72,137,44,194,248,2,255,139,3,15,182,204,15,182,232,131,195,4,193,232,16,
  65,252,255,36,252,238,248,3,15,182,67,252,253,199,68,194,4,237,252,233,244,
  2,248,4,139,137,233,133,201,15,133,244,1,248,5,139,141,233,133,201,15,132,
  244,3,252,246,129,233,235,15,133,244,3,252,233,244,34,255,15,182,252,236,
  15,182,192,129,124,253,252,234,4,239,15,133,244,35,139,44,252,234,59,133,
  233,15,131,244,35,193,224,3,3,133,233,129,120,253,4,239,15,132,244,248,72,
  139,40,72,137,44,202,248,1,139,3,15,182,204,15,182,232,131,195,4,193,232,
  16,65,252,255,36,252,238,248,2,131,189,233,0,15,132,244,249,139,141,233,252,
  246,129,233,235,15,132,244,35,255,15,182,75,252,253,248,3,199,68,202,4,237,
  252,233,244,1,255,15,182,252,236,15,182,192,129,124,253,252,234,4,239,15,
  133,244,39,139,44,252,234,129,124,253,194,4,239,15,135,244,251,255,15,133,
  244,39,59,133,233,15,131,244,39,193,224,3,3,133,233,129,120,253,4,239,15,
  132,244,249,248,1,252,246,133,233,235,15,133,244,253,248,2,72,139,44,202,
  72,137,40,139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,252,255,36,
  252,238,248,3,131,189,233,0,15,132,244,1,139,141,233,255,252,246,129,233,
  235,15,132,244,39,15,182,75,252,253,252,233,244,1,248,5,129,124,253,194,4,
  239,15,133,244,39,139,4,194,252,233,244,158,248,7,128,165,233,235,65,139,
  142,233,65,137,174,233,137,141,233,15,182,75,252,253,252,233,244,2,255,15,
  182,252,236,15,182,192,72,252,247,208,65,139,4,135,129,124,253,252,234,4,
  239,15,133,244,37,139,44,252,234,248,158,139,141,233,35,136,233,105,201,239,
  198,133,233,0,3,141,233,248,1,129,185,233,239,15,133,244,251,57,129,233,15,
  133,244,251,129,121,253,4,239,15,132,244,250,248,2,255,252,246,133,233,235,
  15,133,244,253,248,3,15,182,67,252,253,72,139,44,194,72,137,41,139,3,15,182,
  204,15,182,232,131,195,4,193,232,16,65,252,255,36,252,238,248,4,131,189,233,
  0,15,132,244,2,137,12,36,139,141,233,252,246,129,233,235,15,132,244,37,139,
  12,36,252,233,244,2,248,5,139,137,233,133,201,15,133,244,1,255,139,141,233,
  133,201,15,132,244,252,252,246,129,233,235,15,132,244,37,248,6,137,4,36,199,
  68,36,4,237,137,108,36,8,139,124,36,24,137,151,233,72,141,20,36,137,252,238,
  137,252,253,137,92,36,28,232,251,1,32,139,149,233,139,108,36,8,137,193,252,
  233,244,2,248,7,128,165,233,235,65,139,134,233,65,137,174,233,137,133,233,
  252,233,244,3,255,15,182,252,236,15,182,192,129,124,253,252,234,4,239,15,
  133,244,38,139,44,252,234,59,133,233,15,131,244,38,193,224,3,3,133,233,129,
  120,253,4,239,15,132,244,249,248,1,252,246,133,233,235,15,133,244,253,248,
  2,72,139,12,202,72,137,8,139,3,15,182,204,15,182,232,131,195,4,193,232,16,
  65,252,255,36,252,238,248,3,131,189,233,0,15,132,244,1,255,139,141,233,252,
  246,129,233,235,15,132,244,38,15,182,75,252,253,252,233,244,1,248,7,128,165,
  233,235,65,139,142,233,65,137,174,233,137,141,233,15,182,75,252,253,252,233,
  244,2,255,68,137,60,36,69,139,60,199,248,1,141,12,202,139,105,252,248,252,
  246,133,233,235,15,133,244,253,248,2,139,68,36,4,131,232,1,15,132,244,250,
  68,1,252,248,59,133,233,15,135,244,251,68,41,252,248,65,193,231,3,68,3,189,
  233,248,3,72,139,41,131,193,8,73,137,47,65,131,199,8,131,232,1,15,133,244,
  3,248,4,68,139,60,36,139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,
  252,255,36,252,238,248,5,139,124,36,24,137,151,233,137,252,238,137,194,137,
  252,253,137,92,36,28,232,251,1,33,139,149,233,15,182,75,252,253,252,233,244,
  1,248,7,255,128,165,233,235,65,139,134,233,65,137,174,233,137,133,233,252,
  233,244,2,255,3,68,36,4,255,129,124,253,202,4,239,139,44,202,15,133,244,51,
  141,84,202,8,137,90,252,252,139,157,233,139,11,15,182,252,233,15,182,205,
  131,195,4,65,252,255,36,252,238,255,141,76,202,8,65,137,215,139,105,252,248,
  129,121,253,252,252,239,15,133,244,28,248,52,139,90,252,252,252,247,195,237,
  15,133,244,253,248,1,137,106,252,248,137,68,36,4,131,232,1,15,132,244,249,
  248,2,72,139,41,131,193,8,73,137,47,65,131,199,8,131,232,1,15,133,244,2,139,
  106,252,248,248,3,139,68,36,4,128,189,233,1,15,135,244,251,248,4,139,157,
  233,139,11,15,182,252,233,15,182,205,131,195,4,65,252,255,36,252,238,248,
  5,255,252,247,195,237,15,133,244,4,15,182,75,252,253,72,252,247,209,141,12,
  202,68,139,121,252,248,69,139,191,233,69,139,191,233,252,233,244,4,248,7,
  129,252,235,239,252,247,195,237,15,133,244,254,41,218,65,137,215,139,90,252,
  252,252,233,244,1,248,8,129,195,239,252,233,244,1,255,141,76,202,8,72,139,
  105,232,72,139,65,252,240,72,137,41,72,137,65,8,139,105,224,139,65,228,137,
  105,252,248,137,65,252,252,129,252,248,239,184,237,15,133,244,28,137,202,
  137,90,252,252,139,157,233,139,11,15,182,252,233,15,182,205,131,195,4,65,
  252,255,36,252,238,255,68,137,60,36,68,137,116,36,4,139,108,202,252,240,139,
  68,202,252,248,68,139,181,233,131,195,4,68,139,189,233,248,1,68,57,252,240,
  15,131,244,251,65,129,124,253,199,4,239,15,132,244,250,255,252,242,15,42,
  192,255,219,68,202,252,248,255,73,139,44,199,72,137,108,202,8,131,192,1,255,
  137,68,202,252,248,248,2,15,183,67,252,254,141,156,253,131,233,248,3,68,139,
  116,36,4,68,139,60,36,139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,
  252,255,36,252,238,248,4,131,192,1,255,137,68,202,252,248,255,252,233,244,
  1,248,5,68,41,252,240,248,6,59,133,233,15,135,244,3,68,105,252,248,239,68,
  3,189,233,65,129,191,233,239,15,132,244,253,70,141,116,48,1,73,139,175,233,
  73,139,135,233,72,137,44,202,72,137,68,202,8,68,137,116,202,252,248,252,233,
  244,2,248,7,131,192,1,252,233,244,6,255,129,124,253,202,252,236,239,15,133,
  244,251,139,108,202,232,129,124,253,202,252,244,239,15,133,244,251,129,124,
  253,202,252,252,239,15,133,244,251,128,189,233,235,15,133,244,251,141,156,
  253,131,233,199,68,202,252,248,0,0,0,0,248,1,139,3,15,182,204,15,182,232,
  131,195,4,193,232,16,65,252,255,36,252,238,248,5,198,67,252,252,235,141,156,
  253,131,233,198,3,235,252,233,244,1,255,15,182,252,236,15,182,192,68,137,
  60,36,68,141,188,253,194,233,141,12,202,68,43,122,252,252,133,252,237,15,
  132,244,251,141,108,252,233,252,248,65,57,215,15,131,244,248,248,1,73,139,
  71,252,248,65,131,199,8,72,137,1,131,193,8,57,252,233,15,131,244,249,65,57,
  215,15,130,244,1,248,2,199,65,4,237,131,193,8,57,252,233,15,130,244,2,248,
  3,68,139,60,36,139,3,15,182,204,15,182,232,131,195,4,193,232,16,65,252,255,
  36,252,238,248,5,199,68,36,4,1,0,0,0,137,208,68,41,252,248,15,134,244,3,137,
  197,193,252,237,3,131,197,1,137,108,36,4,139,108,36,24,1,200,59,133,233,15,
  135,244,253,248,6,255,73,139,71,252,248,65,131,199,8,72,137,1,131,193,8,65,
  57,215,15,130,244,6,252,233,244,3,248,7,137,149,233,137,141,233,137,92,36,
  28,65,41,215,139,116,36,4,131,252,238,1,137,252,239,232,251,1,0,139,149,233,
  139,141,233,65,1,215,252,233,244,6,255,193,225,3,255,248,1,139,90,252,252,
  137,68,36,4,252,247,195,237,15,133,244,253,255,248,13,65,137,215,131,232,
  1,15,132,244,249,248,2,73,139,44,15,73,137,111,252,248,65,131,199,8,131,232,
  1,15,133,244,2,248,3,139,68,36,4,15,182,107,252,255,248,5,57,197,15,135,244,
  252,255,72,139,44,10,72,137,106,252,248,255,248,5,56,67,252,255,15,135,244,
  252,255,15,182,75,252,253,72,252,247,209,141,20,202,68,139,122,252,248,69,
  139,191,233,69,139,191,233,139,3,15,182,204,15,182,232,131,195,4,193,232,
  16,65,252,255,36,252,238,248,6,255,65,199,71,252,252,237,65,131,199,8,255,
  199,68,194,252,244,237,255,131,192,1,252,233,244,5,248,7,141,171,233,252,
  247,197,237,15,133,244,14,41,252,234,255,1,252,233,255,137,221,209,252,237,
  129,229,239,102,65,131,172,253,46,233,1,15,132,244,140,255,141,12,202,255,
  129,121,253,4,239,15,135,244,53,129,121,253,12,239,15,135,244,53,255,139,
  105,20,255,129,252,253,239,15,135,244,53,255,252,242,15,16,1,252,242,15,16,
  73,8,255,252,242,15,88,65,16,252,242,15,17,1,133,252,237,15,136,244,249,255,
  15,140,244,249,255,102,15,46,200,248,1,252,242,15,17,65,24,255,221,65,8,221,
  1,255,220,65,16,221,17,221,81,24,133,252,237,15,136,244,247,255,221,81,24,
  15,140,244,247,255,217,201,248,1,255,15,183,67,252,254,255,15,131,244,248,
  141,156,253,131,233,255,141,156,253,131,233,15,183,67,252,254,15,131,245,
  255,15,130,244,248,141,156,253,131,233,255,248,3,102,15,46,193,252,233,244,
  1,255,141,12,202,139,105,4,129,252,253,239,15,132,244,247,255,137,105,252,
  252,139,41,137,105,252,248,252,233,245,255,141,156,253,131,233,139,1,137,
  105,252,252,137,65,252,248,255,65,139,142,233,139,4,129,72,139,128,233,139,
  108,36,24,65,137,150,233,65,137,174,233,76,137,36,36,76,137,108,36,8,72,131,
  252,236,16,252,255,224,255,141,156,253,131,233,139,3,15,182,204,15,182,232,
  131,195,4,193,232,16,65,252,255,36,252,238,255,137,221,209,252,237,129,229,
  239,102,65,131,172,253,46,233,1,15,132,244,142,255,68,139,187,233,139,108,
  36,24,141,12,202,59,141,233,15,135,244,23,15,182,139,233,57,200,15,134,244,
  249,248,2,255,15,183,67,252,254,252,233,245,255,248,3,199,68,194,252,252,
  237,131,192,1,57,200,15,134,244,3,252,233,244,2,255,141,44,197,237,141,4,
  194,68,139,122,252,248,137,104,252,252,68,137,120,252,248,139,108,36,24,141,
  12,200,59,141,233,15,135,244,22,137,209,137,194,15,182,171,233,133,252,237,
  15,132,244,248,248,1,131,193,8,57,209,15,131,244,249,68,139,121,252,248,68,
  137,56,68,139,121,252,252,68,137,120,4,131,192,8,199,65,252,252,237,131,252,
  237,1,15,133,244,1,248,2,255,68,139,187,233,139,3,15,182,204,15,182,232,131,
  195,4,193,232,16,65,252,255,36,252,238,255,248,3,199,64,4,237,131,192,8,131,
  252,237,1,15,133,244,3,252,233,244,2,255,139,106,252,248,76,139,189,233,139,
  108,36,24,141,68,194,252,248,137,149,233,141,136,233,59,141,233,137,133,233,
  255,137,252,239,255,76,137,252,254,137,252,239,255,15,135,244,21,65,199,134,
  233,237,255,65,252,255,215,255,65,252,255,150,233,255,65,199,134,233,237,
  139,149,233,141,12,194,252,247,217,3,141,233,139,90,252,252,252,233,244,12,
  255,254,0
};

enum {
  GLOB_vm_returnp,
  GLOB_cont_dispatch,
  GLOB_vm_returnc,
  GLOB_BC_RET_Z,
  GLOB_vm_return,
  GLOB_vm_leave_cp,
  GLOB_vm_leave_unw,
  GLOB_vm_unwind_c,
  GLOB_vm_unwind_c_eh,
  GLOB_vm_unwind_ff,
  GLOB_vm_unwind_ff_eh,
  GLOB_vm_growstack_c,
  GLOB_vm_growstack_v,
  GLOB_vm_growstack_f,
  GLOB_vm_resume,
  GLOB_vm_pcall,
  GLOB_vm_call,
  GLOB_vm_call_dispatch,
  GLOB_vmeta_call,
  GLOB_vm_call_dispatch_f,
  GLOB_vm_cpcall,
  GLOB_cont_cat,
  GLOB_cont_ra,
  GLOB_BC_CAT_Z,
  GLOB_vmeta_tgets,
  GLOB_vmeta_tgetb,
  GLOB_vmeta_tgetv,
  GLOB_vmeta_tsets,
  GLOB_vmeta_tsetb,
  GLOB_vmeta_tsetv,
  GLOB_cont_nop,
  GLOB_vmeta_comp,
  GLOB_vmeta_binop,
  GLOB_cont_condt,
  GLOB_cont_condf,
  GLOB_vmeta_equal,
  GLOB_vmeta_arith_vn,
  GLOB_vmeta_arith_nv,
  GLOB_vmeta_unm,
  GLOB_vmeta_arith_vv,
  GLOB_vmeta_len,
  GLOB_vmeta_call_ra,
  GLOB_BC_CALLT_Z,
  GLOB_vmeta_for,
  GLOB_ff_assert,
  GLOB_fff_fallback,
  GLOB_fff_res_,
  GLOB_ff_type,
  GLOB_fff_res1,
  GLOB_ff_getmetatable,
  GLOB_ff_setmetatable,
  GLOB_ff_rawget,
  GLOB_ff_tonumber,
  GLOB_fff_resxmm0,
  GLOB_fff_resn,
  GLOB_ff_tostring,
  GLOB_fff_gcstep,
  GLOB_ff_next,
  GLOB_fff_res2,
  GLOB_fff_res,
  GLOB_ff_pairs,
  GLOB_ff_ipairs_aux,
  GLOB_fff_res0,
  GLOB_ff_ipairs,
  GLOB_ff_pcall,
  GLOB_ff_xpcall,
  GLOB_ff_coroutine_resume,
  GLOB_ff_coroutine_wrap_aux,
  GLOB_ff_coroutine_yield,
  GLOB_ff_math_abs,
  GLOB_ff_math_sqrt,
  GLOB_ff_math_floor,
  GLOB_vm_floor,
  GLOB_ff_math_ceil,
  GLOB_vm_ceil,
  GLOB_ff_math_log,
  GLOB_ff_math_log10,
  GLOB_ff_math_exp,
  GLOB_vm_exp,
  GLOB_ff_math_sin,
  GLOB_ff_math_cos,
  GLOB_ff_math_tan,
  GLOB_ff_math_asin,
  GLOB_ff_math_acos,
  GLOB_ff_math_atan,
  GLOB_ff_math_sinh,
  GLOB_ff_math_cosh,
  GLOB_ff_math_tanh,
  GLOB_ff_math_deg,
  GLOB_ff_math_rad,
  GLOB_ff_math_atan2,
  GLOB_ff_math_ldexp,
  GLOB_ff_math_frexp,
  GLOB_ff_math_modf,
  GLOB_vm_trunc,
  GLOB_ff_math_fmod,
  GLOB_ff_math_pow,
  GLOB_vm_pow,
  GLOB_ff_math_min,
  GLOB_ff_math_max,
  GLOB_ff_string_len,
  GLOB_ff_string_byte,
  GLOB_ff_string_char,
  GLOB_fff_newstr,
  GLOB_ff_string_sub,
  GLOB_fff_emptystr,
  GLOB_ff_string_rep,
  GLOB_fff_fallback_2,
  GLOB_ff_string_reverse,
  GLOB_fff_fallback_1,
  GLOB_ff_string_lower,
  GLOB_ff_string_upper,
  GLOB_ff_table_getn,
  GLOB_ff_bit_tobit,
  GLOB_ff_bit_band,
  GLOB_fff_resbit,
  GLOB_fff_fallback_bit_op,
  GLOB_ff_bit_bor,
  GLOB_ff_bit_bxor,
  GLOB_ff_bit_bswap,
  GLOB_ff_bit_bnot,
  GLOB_ff_bit_lshift,
  GLOB_ff_bit_rshift,
  GLOB_ff_bit_arshift,
  GLOB_ff_bit_rol,
  GLOB_ff_bit_ror,
  GLOB_vm_record,
  GLOB_vm_rethook,
  GLOB_vm_inshook,
  GLOB_cont_hook,
  GLOB_vm_hotloop,
  GLOB_vm_callhook,
  GLOB_vm_hotcall,
  GLOB_vm_exit_handler,
  GLOB_vm_exit_interp,
  GLOB_vm_floor_sse,
  GLOB_vm_ceil_sse,
  GLOB_vm_trunc_sse,
  GLOB_vm_mod,
  GLOB_vm_exp2,
  GLOB_vm_exp2raw,
  GLOB_vm_pow_sse,
  GLOB_vm_powi_sse,
  GLOB_vm_foldfpm,
  GLOB_vm_foldarith,
  GLOB_vm_cpuid,
  GLOB_BC_MODVN_Z,
  GLOB_BC_TGETS_Z,
  GLOB_BC_TSETS_Z,
  GLOB__MAX
};
static const char *const globnames[] = {
  "vm_returnp",
  "cont_dispatch",
  "vm_returnc",
  "BC_RET_Z",
  "vm_return",
  "vm_leave_cp",
  "vm_leave_unw",
  "vm_unwind_c@8",
  "vm_unwind_c_eh",
  "vm_unwind_ff@4",
  "vm_unwind_ff_eh",
  "vm_growstack_c",
  "vm_growstack_v",
  "vm_growstack_f",
  "vm_resume",
  "vm_pcall",
  "vm_call",
  "vm_call_dispatch",
  "vmeta_call",
  "vm_call_dispatch_f",
  "vm_cpcall",
  "cont_cat",
  "cont_ra",
  "BC_CAT_Z",
  "vmeta_tgets",
  "vmeta_tgetb",
  "vmeta_tgetv",
  "vmeta_tsets",
  "vmeta_tsetb",
  "vmeta_tsetv",
  "cont_nop",
  "vmeta_comp",
  "vmeta_binop",
  "cont_condt",
  "cont_condf",
  "vmeta_equal",
  "vmeta_arith_vn",
  "vmeta_arith_nv",
  "vmeta_unm",
  "vmeta_arith_vv",
  "vmeta_len",
  "vmeta_call_ra",
  "BC_CALLT_Z",
  "vmeta_for",
  "ff_assert",
  "fff_fallback",
  "fff_res_",
  "ff_type",
  "fff_res1",
  "ff_getmetatable",
  "ff_setmetatable",
  "ff_rawget",
  "ff_tonumber",
  "fff_resxmm0",
  "fff_resn",
  "ff_tostring",
  "fff_gcstep",
  "ff_next",
  "fff_res2",
  "fff_res",
  "ff_pairs",
  "ff_ipairs_aux",
  "fff_res0",
  "ff_ipairs",
  "ff_pcall",
  "ff_xpcall",
  "ff_coroutine_resume",
  "ff_coroutine_wrap_aux",
  "ff_coroutine_yield",
  "ff_math_abs",
  "ff_math_sqrt",
  "ff_math_floor",
  "vm_floor",
  "ff_math_ceil",
  "vm_ceil",
  "ff_math_log",
  "ff_math_log10",
  "ff_math_exp",
  "vm_exp",
  "ff_math_sin",
  "ff_math_cos",
  "ff_math_tan",
  "ff_math_asin",
  "ff_math_acos",
  "ff_math_atan",
  "ff_math_sinh",
  "ff_math_cosh",
  "ff_math_tanh",
  "ff_math_deg",
  "ff_math_rad",
  "ff_math_atan2",
  "ff_math_ldexp",
  "ff_math_frexp",
  "ff_math_modf",
  "vm_trunc",
  "ff_math_fmod",
  "ff_math_pow",
  "vm_pow",
  "ff_math_min",
  "ff_math_max",
  "ff_string_len",
  "ff_string_byte",
  "ff_string_char",
  "fff_newstr",
  "ff_string_sub",
  "fff_emptystr",
  "ff_string_rep",
  "fff_fallback_2",
  "ff_string_reverse",
  "fff_fallback_1",
  "ff_string_lower",
  "ff_string_upper",
  "ff_table_getn",
  "ff_bit_tobit",
  "ff_bit_band",
  "fff_resbit",
  "fff_fallback_bit_op",
  "ff_bit_bor",
  "ff_bit_bxor",
  "ff_bit_bswap",
  "ff_bit_bnot",
  "ff_bit_lshift",
  "ff_bit_rshift",
  "ff_bit_arshift",
  "ff_bit_rol",
  "ff_bit_ror",
  "vm_record",
  "vm_rethook",
  "vm_inshook",
  "cont_hook",
  "vm_hotloop",
  "vm_callhook",
  "vm_hotcall",
  "vm_exit_handler",
  "vm_exit_interp",
  "vm_floor_sse",
  "vm_ceil_sse",
  "vm_trunc_sse",
  "vm_mod",
  "vm_exp2",
  "vm_exp2raw",
  "vm_pow_sse",
  "vm_powi_sse",
  "vm_foldfpm",
  "vm_foldarith",
  "vm_cpuid",
  "BC_MODVN_Z",
  "BC_TGETS_Z",
  "BC_TSETS_Z",
  (const char *)0
};
static const char *const extnames[] = {
  "lj_state_growstack@8",
  "lj_meta_tget",
  "lj_meta_tset",
  "lj_meta_comp",
  "lj_meta_equal",
  "lj_meta_arith",
  "lj_meta_len@8",
  "lj_meta_call",
  "lj_meta_for@8",
  "lj_tab_get",
  "lj_str_fromnum@8",
  "lj_tab_next",
  "lj_tab_getinth@8",
  "lj_ffh_coroutine_wrap_err@8",
  "lj_wrapper_sinh",
  "lj_wrapper_cosh",
  "lj_wrapper_tanh",
  "lj_str_new",
  "lj_tab_len@4",
  "lj_gc_step@4",
  "lj_dispatch_ins@8",
  "lj_trace_hot@8",
  "lj_dispatch_call@8",
  "lj_trace_exit@8",
  "lj_err_throw@8",
  "lj_meta_cat",
  "lj_gc_barrieruv@8",
  "lj_func_closeuv@8",
  "lj_func_newL_gc",
  "lj_tab_new",
  "lj_gc_step_fixtop@4",
  "lj_tab_dup@8",
  "lj_tab_newkey",
  "lj_tab_reasize",
  (const char *)0
};
#define Dt1(_V) (int)(ptrdiff_t)&(((lua_State *)0)_V)
#define Dt2(_V) (int)(ptrdiff_t)&(((global_State *)0)_V)
#define Dt3(_V) (int)(ptrdiff_t)&(((TValue *)0)_V)
#define Dt4(_V) (int)(ptrdiff_t)&(((GCobj *)0)_V)
#define Dt5(_V) (int)(ptrdiff_t)&(((GCstr *)0)_V)
#define Dt6(_V) (int)(ptrdiff_t)&(((GCtab *)0)_V)
#define Dt7(_V) (int)(ptrdiff_t)&(((GCfuncL *)0)_V)
#define Dt8(_V) (int)(ptrdiff_t)&(((GCfuncC *)0)_V)
#define Dt9(_V) (int)(ptrdiff_t)&(((GCproto *)0)_V)
#define DtA(_V) (int)(ptrdiff_t)&(((GCupval *)0)_V)
#define DtB(_V) (int)(ptrdiff_t)&(((Node *)0)_V)
#define DtC(_V) (int)(ptrdiff_t)&(((int *)0)_V)
#define DtD(_V) (int)(ptrdiff_t)&(((GCtrace *)0)_V)
#define DISPATCH_GL(field)	(GG_DISP2G + (int)offsetof(global_State, field))
#define DISPATCH_J(field)	(GG_DISP2J + (int)offsetof(jit_State, field))
#define PC2PROTO(field)  ((int)offsetof(GCproto, field)-(int)sizeof(GCproto))

/* Generate subroutines used by opcodes and other parts of the VM. */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx, int cmov, int sse)
{
  dasm_put(Dst, 0);
  dasm_put(Dst, 2, FRAME_P, LJ_TTRUE, FRAME_TYPE, FRAME_C, FRAME_TYPE, DISPATCH_GL(vmstate), ~LJ_VMST_C);
  dasm_put(Dst, 109, Dt1(->base), Dt1(->top), Dt1(->cframe), Dt1(->maxstack), LJ_TNIL);
  dasm_put(Dst, 200, Dt1(->top), Dt1(->top), Dt1(->glref), Dt2(->vmstate), ~LJ_VMST_C, CFRAME_RAWMASK, 1+1);
  dasm_put(Dst, 296, Dt1(->base), Dt1(->glref), GG_G2DISP, LJ_TFALSE, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, LUA_MINSTACK, -4+PC2PROTO(framesize), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 365, Dt1(->base), Dt1(->top), Dt7(->pc), FRAME_CP, CFRAME_RESUME, Dt1(->glref), GG_G2DISP, Dt1(->cframe), Dt1(->status), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->status), Dt1(->base), Dt1(->top), FRAME_TYPE);
  dasm_put(Dst, 529, FRAME_CP, FRAME_C, Dt1(->cframe), Dt1(->cframe), Dt1(->glref), GG_G2DISP, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top));
  dasm_put(Dst, 642, LJ_TFUNC, Dt7(->pc), Dt1(->stack), Dt1(->top), Dt1(->cframe), Dt1(->cframe), FRAME_CP, LJ_TNIL, 0, Dt7(->pc));
  dasm_put(Dst, 807, PC2PROTO(k), Dt1(->base), LJ_TSTR, BC_GGET, DISPATCH_GL(tmptv), LJ_TTAB);
  if (sse) {
    dasm_put(Dst, 912);
  } else {
  }
  dasm_put(Dst, 924, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, 2+1, LJ_TSTR, BC_GSET);
  dasm_put(Dst, 1070, DISPATCH_GL(tmptv), LJ_TTAB);
  if (sse) {
    dasm_put(Dst, 912);
  } else {
  }
  dasm_put(Dst, 1094, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, 3+1, Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1266, -BCBIAS_J*4, LJ_TISTRUECOND, LJ_TISTRUECOND, Dt1(->base));
  dasm_put(Dst, 1365, Dt1(->base), Dt1(->base), FRAME_CONT);
  dasm_put(Dst, 1488, 2+1, Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base), Dt7(->pc), Dt1(->base), Dt1(->base), GG_DISP2STATIC);
  dasm_put(Dst, 1666, 1+1, LJ_TISTRUECOND, 1+1);
  dasm_put(Dst, 1772, ~LJ_TNUMX);
  if (cmov) {
  dasm_put(Dst, 1780);
  } else {
  dasm_put(Dst, 1784);
  }
  dasm_put(Dst, 1793, ((char *)(&((GCfuncC *)0)->upvalue)), LJ_TSTR, ~LJ_TLIGHTUD, 1+1, LJ_TTAB, Dt6(->metatable), LJ_TNIL);
  dasm_put(Dst, 1872, DISPATCH_GL(gcroot)+4*(GCROOT_MMNAME+MM_metatable), LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), DtB(->next));
  dasm_put(Dst, 1930, LJ_TNIL, LJ_TUDATA, LJ_TISNUM, LJ_TNUMX, DISPATCH_GL(gcroot[GCROOT_BASEMT]));
  dasm_put(Dst, 1999, 2+1, LJ_TTAB, Dt6(->metatable), LJ_TTAB, Dt6(->metatable), LJ_TTAB, Dt6(->marked), LJ_GC_BLACK, Dt6(->marked), cast_byte(~LJ_GC_BLACK));
  dasm_put(Dst, 2068, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist), 2+1, LJ_TTAB, 1+1, LJ_TISNUM);
  dasm_put(Dst, 2154);
  if (sse) {
    dasm_put(Dst, 2159);
  } else {
    dasm_put(Dst, 2169);
  }
  dasm_put(Dst, 2176, 1+1, LJ_TSTR, LJ_TSTR, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold));
  dasm_put(Dst, 2245, Dt1(->base), Dt1(->base), 1+1, LJ_TTAB, Dt1(->base));
  dasm_put(Dst, 2314, Dt1(->top), Dt1(->base), 1+2, LJ_TNIL, LJ_TNIL, 1+1);
  dasm_put(Dst, 2402, LJ_TTAB, Dt8(->upvalue[0]), LJ_TFUNC, LJ_TNIL, 1+3, 1+1, LJ_TTAB, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 2474, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 2507, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->hmask), 1+0);
  dasm_put(Dst, 2584, 1+1, LJ_TTAB, Dt8(->upvalue[0]), LJ_TFUNC);
  if (sse) {
    dasm_put(Dst, 2622);
  } else {
    dasm_put(Dst, 2632);
  }
  dasm_put(Dst, 2639, 1+3, 1+1, 8+FRAME_PCALL, DISPATCH_GL(hookmask), HOOK_ACTIVE_SHIFT, 2+1, LJ_TFUNC);
  dasm_put(Dst, 2704, LJ_TFUNC, 16+FRAME_PCALL, 1+1, LJ_TTHREAD, Dt1(->cframe), Dt1(->status), LUA_YIELD, Dt1(->top));
  dasm_put(Dst, 2793, Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP);
  dasm_put(Dst, 2880, Dt1(->base), LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack), LJ_TTRUE, FRAME_TYPE);
  dasm_put(Dst, 2995, LJ_TFALSE, Dt1(->top), Dt1(->top), 1+2, Dt1(->top), Dt1(->base), Dt8(->upvalue[0].gcr), Dt1(->cframe));
  dasm_put(Dst, 3090, Dt1(->status), LUA_YIELD, Dt1(->top), Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 3156, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack));
  dasm_put(Dst, 3245, FRAME_TYPE, Dt1(->top), Dt1(->base), Dt1(->cframe), CFRAME_RESUME);
  dasm_put(Dst, 3355, Dt1(->base), Dt1(->top), Dt1(->cframe), LUA_YIELD, Dt1(->status));
  if (sse) {
    dasm_put(Dst, 3382, 1+1, LJ_TISNUM, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32));
  } else {
    dasm_put(Dst, 3446, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 3482, 1+1, FRAME_TYPE, LJ_TNIL);
  if (sse) {
    dasm_put(Dst, 3577, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
    dasm_put(Dst, 3639, 1+1, LJ_TISNUM);
  } else {
    dasm_put(Dst, 3669, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
    dasm_put(Dst, 3728, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 3755, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 3824, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 3881, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 3944, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4034);
  if (sse) {
  dasm_put(Dst, 4046, 1+1, LJ_TISNUM);
  } else {
  }
  dasm_put(Dst, 4071);
  if (sse) {
  dasm_put(Dst, 4085, 1+1, LJ_TISNUM);
  } else {
  }
  dasm_put(Dst, 4110);
  if (sse) {
  dasm_put(Dst, 4124, 1+1, LJ_TISNUM);
  } else {
  }
  dasm_put(Dst, 4149);
  if (sse) {
    dasm_put(Dst, 4165, 1+1, LJ_TISNUM, Dt8(->upvalue[0]));
  } else {
    dasm_put(Dst, 4204, 1+1, LJ_TISNUM, Dt8(->upvalue[0]));
  }
  dasm_put(Dst, 4237, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 4302, 1+1, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 4401);
  } else {
    dasm_put(Dst, 4407);
  }
  dasm_put(Dst, 4414);
  if (sse) {
    dasm_put(Dst, 4439);
  } else {
    dasm_put(Dst, 4445);
  }
  dasm_put(Dst, 4448, 1+2);
  if (sse) {
    dasm_put(Dst, 4457);
  } else {
    dasm_put(Dst, 4465);
  }
  dasm_put(Dst, 4473);
  if (sse) {
    dasm_put(Dst, 4476, (unsigned int)(U64x(43500000,00000000)), (unsigned int)((U64x(43500000,00000000))>>32));
  } else {
    dasm_put(Dst, 4503);
  }
  dasm_put(Dst, 4520);
  if (sse) {
    dasm_put(Dst, 4536, 1+1, LJ_TISNUM);
  } else {
    dasm_put(Dst, 4561, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 4583);
  if (sse) {
    dasm_put(Dst, 4605);
  } else {
    dasm_put(Dst, 4631);
  }
  dasm_put(Dst, 4648, 1+2);
  if (sse) {
    dasm_put(Dst, 4688);
  } else {
    dasm_put(Dst, 4696);
  }
  dasm_put(Dst, 4706, 2+1, LJ_TISNUM, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 4758, 2+1, LJ_TISNUM, LJ_TISNUM);
  } else {
    dasm_put(Dst, 4805, 2+1, LJ_TISNUM, LJ_TISNUM);
  }
  if (sse) {
  dasm_put(Dst, 4846, 1+1, LJ_TISNUM, LJ_TISNUM);
  } else {
  }
  if (sse) {
  dasm_put(Dst, 4917, 1+1, LJ_TISNUM, LJ_TISNUM);
  } else {
  }
  if (!sse) {
    dasm_put(Dst, 4988);
  }
  dasm_put(Dst, 4997, 1+1, LJ_TSTR);
  if (sse) {
    dasm_put(Dst, 5019, Dt5(->len));
  } else {
    dasm_put(Dst, 5030, Dt5(->len));
  }
  dasm_put(Dst, 5038, 1+1, LJ_TSTR, Dt5(->len), Dt5([1]));
  if (sse) {
    dasm_put(Dst, 5076);
  } else {
    dasm_put(Dst, 5086);
  }
  dasm_put(Dst, 5097, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+1, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 5134);
  } else {
    dasm_put(Dst, 5156);
  }
  dasm_put(Dst, 5176, Dt1(->base), Dt1(->base), LJ_TSTR, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+2, LJ_TISNUM);
  dasm_put(Dst, 2154);
  if (sse) {
    dasm_put(Dst, 5285);
  } else {
    dasm_put(Dst, 5296);
  }
  dasm_put(Dst, 5304, LJ_TSTR, LJ_TISNUM, Dt5(->len));
  if (sse) {
    dasm_put(Dst, 5334);
  } else {
  }
  dasm_put(Dst, 5341, sizeof(GCstr)-1);
  dasm_put(Dst, 5416, 2+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold));
  dasm_put(Dst, 5477, LJ_TSTR, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 5498);
  } else {
    dasm_put(Dst, 5505);
  }
  dasm_put(Dst, 5517, Dt5(->len), DISPATCH_GL(tmpbuf.sz), Dt5([1]), DISPATCH_GL(tmpbuf.buf), DISPATCH_GL(tmpbuf.buf), 1+1);
  dasm_put(Dst, 5585, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 5652, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz));
  dasm_put(Dst, 5725, sizeof(GCstr), DISPATCH_GL(tmpbuf.buf), 1+1);
  dasm_put(Dst, 5810, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 5884, 1+1, LJ_TTAB);
  if (sse) {
    dasm_put(Dst, 5951);
  } else {
  }
  if (sse) {
    dasm_put(Dst, 5961, 1+1, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  if (sse) {
  dasm_put(Dst, 6013, 1+1, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6056, LJ_TISNUM);
  if (sse) {
  dasm_put(Dst, 6083);
  } else {
  }
  dasm_put(Dst, 6100);
  if (sse) {
  dasm_put(Dst, 6108, 1+1, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6056, LJ_TISNUM);
  if (sse) {
  dasm_put(Dst, 6151);
  } else {
  }
  dasm_put(Dst, 6100);
  if (sse) {
  dasm_put(Dst, 6168, 1+1, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6056, LJ_TISNUM);
  if (sse) {
  dasm_put(Dst, 6211);
  } else {
  }
  dasm_put(Dst, 6100);
  if (sse) {
  dasm_put(Dst, 6228, 1+1, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6271);
  if (sse) {
  dasm_put(Dst, 6278, 1+1, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6321);
  if (sse) {
    dasm_put(Dst, 6325);
  } else {
  }
  dasm_put(Dst, 6337);
  if (sse) {
  dasm_put(Dst, 6348, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6417);
  if (sse) {
  dasm_put(Dst, 6426, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6495);
  if (sse) {
  dasm_put(Dst, 6505, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6574);
  if (sse) {
  dasm_put(Dst, 6584, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6653);
  if (sse) {
  dasm_put(Dst, 6662, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6731, 1+2, 1+1, Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), Dt8(->f), Dt1(->base));
  dasm_put(Dst, 6809, Dt1(->top), Dt7(->pc), FRAME_TYPE, LUA_MINSTACK, Dt1(->base), Dt1(->base));
  dasm_put(Dst, 6936, Dt1(->top), Dt1(->base), Dt1(->top));
#if LJ_HASJIT
  dasm_put(Dst, 6975, DISPATCH_GL(hookmask), HOOK_VMEVENT, HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount));
#endif
  dasm_put(Dst, 7008, DISPATCH_GL(hookmask), HOOK_ACTIVE, DISPATCH_GL(hookmask), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), LUA_MASKLINE);
  dasm_put(Dst, 7062, Dt1(->base), Dt1(->base), GG_DISP2STATIC);
#if LJ_HASJIT
  dasm_put(Dst, 7129, Dt7(->pc), PC2PROTO(framesize), Dt1(->base), Dt1(->top), GG_DISP2J, DISPATCH_J(L));
#endif
  dasm_put(Dst, 7176);
#if LJ_HASJIT
  dasm_put(Dst, 7003);
#endif
  dasm_put(Dst, 7183);
#if LJ_HASJIT
  dasm_put(Dst, 7186);
#endif
  dasm_put(Dst, 7196, Dt1(->base), Dt1(->top));
#if LJ_HASJIT
  dasm_put(Dst, 7229);
#endif
  dasm_put(Dst, 7234, Dt1(->base), Dt1(->top));
#if LJ_HASJIT
  dasm_put(Dst, 7265, DISPATCH_GL(vmstate), DISPATCH_GL(vmstate), ~LJ_VMST_EXIT, DISPATCH_J(exitno), DISPATCH_J(parent), 16*8, DISPATCH_GL(jit_L), DISPATCH_GL(jit_base), DISPATCH_J(L), DISPATCH_GL(jit_L), Dt1(->base), GG_DISP2J, Dt1(->cframe), CFRAME_RAWMASK, CFRAME_OFS_L, Dt1(->base), CFRAME_OFS_PC);
#endif
  dasm_put(Dst, 7504);
#if LJ_HASJIT
  dasm_put(Dst, 7507, Dt7(->pc), PC2PROTO(k), DISPATCH_GL(jit_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, BC_FUNCF);
#endif
  dasm_put(Dst, 7607);
  if (!sse) {
  dasm_put(Dst, 7610);
  }
  dasm_put(Dst, 7655, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  if (!sse) {
  dasm_put(Dst, 7741);
  }
  dasm_put(Dst, 7786, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(bff00000,00000000)), (unsigned int)((U64x(bff00000,00000000))>>32));
  if (!sse) {
  dasm_put(Dst, 7872);
  }
  dasm_put(Dst, 7911, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  if (sse) {
    dasm_put(Dst, 8000, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  } else {
    dasm_put(Dst, 8114);
  }
  dasm_put(Dst, 8161);
  if (!sse) {
  } else {
    dasm_put(Dst, 8238);
  }
  dasm_put(Dst, 8241);
  dasm_put(Dst, 8326, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  dasm_put(Dst, 8427, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(7ff00000,00000000)), (unsigned int)((U64x(7ff00000,00000000))>>32));
  dasm_put(Dst, 8601);
#if LJ_HASJIT
  if (sse) {
    dasm_put(Dst, 8642);
    dasm_put(Dst, 8712);
    dasm_put(Dst, 8784);
  } else {
    dasm_put(Dst, 8836);
    dasm_put(Dst, 8928);
  }
  dasm_put(Dst, 8974);
#endif
  dasm_put(Dst, 8978);
  if (sse) {
    dasm_put(Dst, 8981, (unsigned int)(U64x(80000000,00000000)), (unsigned int)((U64x(80000000,00000000))>>32));
    dasm_put(Dst, 9066, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32));
  } else {
    dasm_put(Dst, 9194);
    dasm_put(Dst, 9277);
    if (cmov) {
    dasm_put(Dst, 9332);
    } else {
    dasm_put(Dst, 9351);
    }
    dasm_put(Dst, 8974);
  }
  dasm_put(Dst, 9392);
}

/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, BCOp op, int defop, int cmov, int sse)
{
  int vk = 0;
  dasm_put(Dst, 1770, defop);

  switch (op) {

  /* -- Comparison ops ---------------------------------------------------- */

  /* Remember: all ops branch for a true comparison, fall through otherwise. */

  case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
    dasm_put(Dst, 9414, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 9435);
    } else {
      dasm_put(Dst, 9450);
      if (cmov) {
      dasm_put(Dst, 9460);
      } else {
      dasm_put(Dst, 9466);
      }
    }
    switch (op) {
    case BC_ISLT:
      dasm_put(Dst, 9473);
      break;
    case BC_ISGE:
      dasm_put(Dst, 9272);
      break;
    case BC_ISLE:
      dasm_put(Dst, 5879);
      break;
    case BC_ISGT:
      dasm_put(Dst, 9478);
      break;
    default: break;  /* Shut up GCC. */
    }
    dasm_put(Dst, 9483, -BCBIAS_J*4);
    break;

  case BC_ISEQV: case BC_ISNEV:
    vk = op == BC_ISEQV;
    dasm_put(Dst, 9518, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 9544);
    } else {
      dasm_put(Dst, 9556);
      if (cmov) {
      dasm_put(Dst, 9460);
      } else {
      dasm_put(Dst, 9466);
      }
    }
  iseqne_fp:
    if (vk) {
      dasm_put(Dst, 9563);
    } else {
      dasm_put(Dst, 9572);
    }
  iseqne_end:
    if (vk) {
      dasm_put(Dst, 9581, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 9596, -BCBIAS_J*4);
    }
    dasm_put(Dst, 9497);
    if (op == BC_ISEQV || op == BC_ISNEV) {
      dasm_put(Dst, 9611, LJ_TISPRI, LJ_TISTABUD, Dt6(->metatable), Dt6(->nomm), 1<<MM_eq);
      if (vk) {
	dasm_put(Dst, 9669);
      } else {
	dasm_put(Dst, 9673);
      }
      dasm_put(Dst, 9679);
    }
    break;
  case BC_ISEQS: case BC_ISNES:
    vk = op == BC_ISEQS;
    dasm_put(Dst, 9684, LJ_TSTR);
  iseqne_test:
    if (vk) {
      dasm_put(Dst, 9567);
    } else {
      dasm_put(Dst, 2788);
    }
    goto iseqne_end;
  case BC_ISEQN: case BC_ISNEN:
    vk = op == BC_ISEQN;
    dasm_put(Dst, 9709, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 9723);
    } else {
      dasm_put(Dst, 9736);
      if (cmov) {
      dasm_put(Dst, 9460);
      } else {
      dasm_put(Dst, 9466);
      }
    }
    goto iseqne_fp;
  case BC_ISEQP: case BC_ISNEP:
    vk = op == BC_ISEQP;
    dasm_put(Dst, 9744);
    goto iseqne_test;

  /* -- Unary test and copy ops ------------------------------------------- */

  case BC_ISTC: case BC_ISFC: case BC_IST: case BC_ISF:
    dasm_put(Dst, 9756, LJ_TISTRUECOND);
    if (op == BC_IST || op == BC_ISTC) {
      dasm_put(Dst, 9768);
    } else {
      dasm_put(Dst, 9773);
    }
    if (op == BC_ISTC || op == BC_ISFC) {
      dasm_put(Dst, 9778);
    }
    dasm_put(Dst, 9789, -BCBIAS_J*4);
    break;

  /* -- Unary ops --------------------------------------------------------- */

  case BC_MOV:
    dasm_put(Dst, 9822);
    break;
  case BC_NOT:
    dasm_put(Dst, 9851, LJ_TISTRUECOND, LJ_TTRUE);
    break;
  case BC_UNM:
    dasm_put(Dst, 9888, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 9899, (unsigned int)(U64x(80000000,00000000)), (unsigned int)((U64x(80000000,00000000))>>32));
    } else {
      dasm_put(Dst, 9924);
    }
    dasm_put(Dst, 9497);
    break;
  case BC_LEN:
    dasm_put(Dst, 9933, LJ_TSTR);
    if (sse) {
      dasm_put(Dst, 9947, Dt5(->len));
    } else {
      dasm_put(Dst, 9965, Dt5(->len));
    }
    dasm_put(Dst, 9974, LJ_TTAB);
    if (sse) {
      dasm_put(Dst, 10016);
    } else {
    }
    dasm_put(Dst, 10025);
    break;

  /* -- Binary ops -------------------------------------------------------- */


  case BC_ADDVN: case BC_ADDNV: case BC_ADDVV:
    dasm_put(Dst, 10035);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10043, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10055);
    } else {
    dasm_put(Dst, 10070);
    }
      break;
    case 1:
    dasm_put(Dst, 10079, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10091);
    } else {
    dasm_put(Dst, 10106);
    }
      break;
    default:
    dasm_put(Dst, 10115, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10137);
    } else {
    dasm_put(Dst, 10151);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 9917);
    } else {
    dasm_put(Dst, 9929);
    }
    dasm_put(Dst, 9497);
    break;
  case BC_SUBVN: case BC_SUBNV: case BC_SUBVV:
    dasm_put(Dst, 10035);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10043, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10159);
    } else {
    dasm_put(Dst, 10174);
    }
      break;
    case 1:
    dasm_put(Dst, 10079, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10183);
    } else {
    dasm_put(Dst, 10198);
    }
      break;
    default:
    dasm_put(Dst, 10115, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10207);
    } else {
    dasm_put(Dst, 10221);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 9917);
    } else {
    dasm_put(Dst, 9929);
    }
    dasm_put(Dst, 9497);
    break;
  case BC_MULVN: case BC_MULNV: case BC_MULVV:
    dasm_put(Dst, 10035);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10043, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10229);
    } else {
    dasm_put(Dst, 10244);
    }
      break;
    case 1:
    dasm_put(Dst, 10079, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10253);
    } else {
    dasm_put(Dst, 10268);
    }
      break;
    default:
    dasm_put(Dst, 10115, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10277);
    } else {
    dasm_put(Dst, 10291);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 9917);
    } else {
    dasm_put(Dst, 9929);
    }
    dasm_put(Dst, 9497);
    break;
  case BC_DIVVN: case BC_DIVNV: case BC_DIVVV:
    dasm_put(Dst, 10035);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10043, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10299);
    } else {
    dasm_put(Dst, 10314);
    }
      break;
    case 1:
    dasm_put(Dst, 10079, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10323);
    } else {
    dasm_put(Dst, 10338);
    }
      break;
    default:
    dasm_put(Dst, 10115, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10347);
    } else {
    dasm_put(Dst, 10361);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 9917);
    } else {
    dasm_put(Dst, 9929);
    }
    dasm_put(Dst, 9497);
    break;
  case BC_MODVN:
    dasm_put(Dst, 10035);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10043, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10369);
    } else {
    dasm_put(Dst, 10384);
    }
      break;
    case 1:
    dasm_put(Dst, 10079, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10393);
    } else {
    dasm_put(Dst, 10408);
    }
      break;
    default:
    dasm_put(Dst, 10115, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10417);
    } else {
    dasm_put(Dst, 10431);
    }
      break;
    }
    dasm_put(Dst, 10439);
    if (sse) {
    dasm_put(Dst, 9917);
    } else {
    dasm_put(Dst, 9929);
    }
    dasm_put(Dst, 9497);
    break;
  case BC_MODNV: case BC_MODVV:
    dasm_put(Dst, 10035);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10043, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10369);
    } else {
    dasm_put(Dst, 10384);
    }
      break;
    case 1:
    dasm_put(Dst, 10079, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10393);
    } else {
    dasm_put(Dst, 10408);
    }
      break;
    default:
    dasm_put(Dst, 10115, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10417);
    } else {
    dasm_put(Dst, 10431);
    }
      break;
    }
    dasm_put(Dst, 10445);
    break;
  case BC_POW:
    dasm_put(Dst, 10035);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10043, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10369);
    } else {
    dasm_put(Dst, 10384);
    }
      break;
    case 1:
    dasm_put(Dst, 10079, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10393);
    } else {
    dasm_put(Dst, 10408);
    }
      break;
    default:
    dasm_put(Dst, 10115, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 10417);
    } else {
    dasm_put(Dst, 10431);
    }
      break;
    }
    dasm_put(Dst, 10450);
    if (sse) {
    dasm_put(Dst, 9917);
    } else {
    dasm_put(Dst, 9929);
    }
    dasm_put(Dst, 9497);
    break;

  case BC_CAT:
    dasm_put(Dst, 10454, Dt1(->base), Dt1(->base));
    break;

  /* -- Constant ops ------------------------------------------------------ */

  case BC_KSTR:
    dasm_put(Dst, 10538, LJ_TSTR);
    break;
  case BC_KSHORT:
    if (sse) {
      dasm_put(Dst, 10575);
    } else {
      dasm_put(Dst, 10590);
    }
    dasm_put(Dst, 9497);
    break;
  case BC_KNUM:
    if (sse) {
      dasm_put(Dst, 10598);
    } else {
      dasm_put(Dst, 10612);
    }
    dasm_put(Dst, 9497);
    break;
  case BC_KPRI:
    dasm_put(Dst, 10620);
    break;
  case BC_KNIL:
    dasm_put(Dst, 10649, LJ_TNIL);
    break;

  /* -- Upvalue and function ops ------------------------------------------ */

  case BC_UGET:
    dasm_put(Dst, 10697, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETV:
#define TV2MARKOFS \
 ((int32_t)offsetof(GCupval, marked)-(int32_t)offsetof(GCupval, tv))
    dasm_put(Dst, 10738, offsetof(GCfuncL, uvptr), DtA(->closed), DtA(->v), TV2MARKOFS, LJ_GC_BLACK, LJ_TISGCV, LJ_TISNUM - LJ_TISGCV, Dt4(->gch.marked), LJ_GC_WHITES, GG_DISP2G);
    dasm_put(Dst, 10834);
    break;
#undef TV2MARKOFS
  case BC_USETS:
    dasm_put(Dst, 10846, offsetof(GCfuncL, uvptr), DtA(->v), LJ_TSTR, DtA(->marked), LJ_GC_BLACK, Dt4(->gch.marked), LJ_GC_WHITES, DtA(->closed), GG_DISP2G);
    break;
  case BC_USETN:
    dasm_put(Dst, 10942);
    if (sse) {
      dasm_put(Dst, 10947);
    } else {
      dasm_put(Dst, 9739);
    }
    dasm_put(Dst, 10955, offsetof(GCfuncL, uvptr), DtA(->v));
    if (sse) {
      dasm_put(Dst, 10964);
    } else {
      dasm_put(Dst, 10970);
    }
    dasm_put(Dst, 9497);
    break;
  case BC_USETP:
    dasm_put(Dst, 10973, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_UCLO:
    dasm_put(Dst, 11013, -BCBIAS_J*4, Dt1(->openupval), Dt1(->base), Dt1(->base));
    break;

  case BC_FNEW:
    dasm_put(Dst, 11069, Dt1(->base), Dt1(->base), LJ_TFUNC);
    break;

  /* -- Table ops --------------------------------------------------------- */

  case BC_TNEW:
    dasm_put(Dst, 11136, Dt1(->base), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), LJ_TTAB);
    break;
  case BC_TDUP:
    dasm_put(Dst, 11260, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), LJ_TTAB);
    break;

  case BC_GGET:
    dasm_put(Dst, 11359, Dt7(->env));
    break;
  case BC_GSET:
    dasm_put(Dst, 11379, Dt7(->env));
    break;

  case BC_TGETV:
    dasm_put(Dst, 11399, LJ_TTAB, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 11432);
    } else {
    }
    dasm_put(Dst, 11453, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    dasm_put(Dst, 11538, LJ_TNIL, LJ_TSTR);
    break;
  case BC_TGETS:
    dasm_put(Dst, 11567, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL);
    dasm_put(Dst, 11652, LJ_TNIL, DtB(->next), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    break;
  case BC_TGETB:
    dasm_put(Dst, 11724, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    dasm_put(Dst, 11820, LJ_TNIL);
    break;

  case BC_TSETV:
    dasm_put(Dst, 11837, LJ_TTAB, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 11432);
    } else {
    }
    dasm_put(Dst, 11870, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->metatable));
    dasm_put(Dst, 11950, Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETS:
    dasm_put(Dst, 12014, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->nomm), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL);
    dasm_put(Dst, 12091, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, DtB(->next));
    dasm_put(Dst, 12178, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, Dt1(->base), Dt1(->base), Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETB:
    dasm_put(Dst, 12270, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable));
    dasm_put(Dst, 12365, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  case BC_TSETM:
    dasm_put(Dst, 12413, Dt6(->marked), LJ_GC_BLACK, Dt6(->asize), Dt6(->array), Dt1(->base), Dt1(->base));
    dasm_put(Dst, 12563, Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  /* -- Calls and vararg handling ----------------------------------------- */

  case BC_CALL: case BC_CALLM:
    dasm_put(Dst, 10039);
    if (op == BC_CALLM) {
      dasm_put(Dst, 12583);
    }
    dasm_put(Dst, 12588, LJ_TFUNC, Dt7(->pc));
    break;

  case BC_CALLMT:
    dasm_put(Dst, 12583);
    break;
  case BC_CALLT:
    dasm_put(Dst, 12631, LJ_TFUNC, FRAME_TYPE, Dt7(->ffid), Dt7(->pc));
    dasm_put(Dst, 12749, FRAME_TYPE, Dt7(->pc), PC2PROTO(k), FRAME_VARG, FRAME_TYPEP, FRAME_VARG);
    break;

  case BC_ITERC:
    dasm_put(Dst, 12823, LJ_TFUNC, 2+1, Dt7(->pc));
    break;

  case BC_ITERN:
#if LJ_HASJIT
#endif
    dasm_put(Dst, 12895, Dt6(->asize), Dt6(->array), LJ_TNIL);
    if (sse) {
      dasm_put(Dst, 12947);
    } else {
      dasm_put(Dst, 12953);
    }
    dasm_put(Dst, 12959);
    if (sse) {
      dasm_put(Dst, 9917);
    } else {
      dasm_put(Dst, 9929);
    }
    dasm_put(Dst, 12972, -BCBIAS_J*4);
    if (!sse) {
      dasm_put(Dst, 13026);
    }
    dasm_put(Dst, 13032, Dt6(->hmask), sizeof(Node), Dt6(->node), DtB(->val.it), LJ_TNIL, DtB(->key), DtB(->val));
    break;

  case BC_ISNEXT:
    dasm_put(Dst, 13111, LJ_TFUNC, LJ_TTAB, LJ_TNIL, Dt8(->ffid), FF_next_N, -BCBIAS_J*4, BC_JMP, -BCBIAS_J*4, BC_ITERC);
    break;

  case BC_VARG:
    dasm_put(Dst, 13212, (8+FRAME_VARG), LJ_TNIL, Dt1(->maxstack));
    dasm_put(Dst, 13379, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
    break;

  /* -- Returns ----------------------------------------------------------- */

  case BC_RETM:
    dasm_put(Dst, 12583);
    break;

  case BC_RET: case BC_RET0: case BC_RET1:
    if (op != BC_RET0) {
      dasm_put(Dst, 13449);
    }
    dasm_put(Dst, 13453, FRAME_TYPE);
    switch (op) {
    case BC_RET:
      dasm_put(Dst, 13472);
      break;
    case BC_RET1:
      dasm_put(Dst, 13526);
      /* fallthrough */
    case BC_RET0:
      dasm_put(Dst, 13536);
    default:
      break;
    }
    dasm_put(Dst, 13547, Dt7(->pc), PC2PROTO(k));
    if (op == BC_RET) {
      dasm_put(Dst, 13595, LJ_TNIL);
    } else {
      dasm_put(Dst, 13606, LJ_TNIL);
    }
    dasm_put(Dst, 13613, -FRAME_VARG, FRAME_TYPEP);
    if (op != BC_RET0) {
      dasm_put(Dst, 13637);
    }
    dasm_put(Dst, 4531);
    break;

  /* -- Loops and branches ------------------------------------------------ */


  case BC_FORL:
#if LJ_HASJIT
    dasm_put(Dst, 13641, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_JFORI:
  case BC_JFORL:
#if !LJ_HASJIT
    break;
#endif
  case BC_FORI:
  case BC_IFORL:
    vk = (op == BC_IFORL || op == BC_JFORL);
    dasm_put(Dst, 13662);
    if (!vk) {
      dasm_put(Dst, 13666, LJ_TISNUM, LJ_TISNUM);
    }
    dasm_put(Dst, 13685);
    if (!vk) {
      dasm_put(Dst, 13689, LJ_TISNUM);
    }
    if (sse) {
      dasm_put(Dst, 13698);
      if (vk) {
	dasm_put(Dst, 13710);
      } else {
	dasm_put(Dst, 13729);
      }
      dasm_put(Dst, 13734);
    } else {
      dasm_put(Dst, 13747);
      if (vk) {
	dasm_put(Dst, 13753);
      } else {
	dasm_put(Dst, 13769);
      }
      dasm_put(Dst, 13777);
      if (cmov) {
      dasm_put(Dst, 9460);
      } else {
      dasm_put(Dst, 9466);
      }
      if (!cmov) {
	dasm_put(Dst, 13782);
      }
    }
    if (op == BC_FORI) {
      dasm_put(Dst, 13788, -BCBIAS_J*4);
    } else if (op == BC_JFORI) {
      dasm_put(Dst, 13798, -BCBIAS_J*4, BC_JLOOP);
    } else if (op == BC_IFORL) {
      dasm_put(Dst, 13812, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 13808, BC_JLOOP);
    }
    dasm_put(Dst, 9495);
    if (sse) {
      dasm_put(Dst, 13822);
    }
    break;

  case BC_ITERL:
#if LJ_HASJIT
    dasm_put(Dst, 13641, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_JITERL:
#if !LJ_HASJIT
    break;
#endif
  case BC_IITERL:
    dasm_put(Dst, 13833, LJ_TNIL);
    if (op == BC_JITERL) {
      dasm_put(Dst, 13848, BC_JLOOP);
    } else {
      dasm_put(Dst, 13862, -BCBIAS_J*4);
    }
    dasm_put(Dst, 9799);
    break;

  case BC_LOOP:
#if LJ_HASJIT
    dasm_put(Dst, 13641, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_ILOOP:
    dasm_put(Dst, 9497);
    break;

  case BC_JLOOP:
#if LJ_HASJIT
    dasm_put(Dst, 13878, DISPATCH_J(trace), DtD(->mcode), DISPATCH_GL(jit_base), DISPATCH_GL(jit_L));
#endif
    break;

  case BC_JMP:
    dasm_put(Dst, 13919, -BCBIAS_J*4);
    break;

  /* -- Function headers -------------------------------------------------- */

   /*
   ** Reminder: A function may be called with func/args above L->maxstack,
   ** i.e. occupying EXTRA_STACK slots. And vmeta_call may add one extra slot,
   ** too. This means all FUNC* ops (including fast functions) must check
   ** for stack overflow _before_ adding more slots!
   */

  case BC_FUNCF:
#if LJ_HASJIT
    dasm_put(Dst, 13945, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
  case BC_FUNCV:  /* NYI: compiled vararg functions. */
    break;

  case BC_JFUNCF:
#if !LJ_HASJIT
    break;
#endif
  case BC_IFUNCF:
    dasm_put(Dst, 13966, -4+PC2PROTO(k), Dt1(->maxstack), -4+PC2PROTO(numparams));
    if (op == BC_JFUNCF) {
      dasm_put(Dst, 13997, BC_JLOOP);
    } else {
      dasm_put(Dst, 9497);
    }
    dasm_put(Dst, 14006, LJ_TNIL);
    break;

  case BC_JFUNCV:
#if !LJ_HASJIT
    break;
#endif
    dasm_put(Dst, 8976);
    break;  /* NYI: compiled vararg functions. */

  case BC_IFUNCV:
    dasm_put(Dst, 14028, FRAME_VARG, Dt1(->maxstack), -4+PC2PROTO(numparams), LJ_TNIL);
    if (op == BC_JFUNCV) {
      dasm_put(Dst, 13997, BC_JLOOP);
    } else {
      dasm_put(Dst, 14125, -4+PC2PROTO(k));
    }
    dasm_put(Dst, 14150, LJ_TNIL);
    break;

  case BC_FUNCC:
  case BC_FUNCCW:
    dasm_put(Dst, 14172, Dt8(->f), Dt1(->base), 8*LUA_MINSTACK, Dt1(->maxstack), Dt1(->top));
    if (op == BC_FUNCC) {
      dasm_put(Dst, 14202);
    } else {
      dasm_put(Dst, 14206);
    }
    dasm_put(Dst, 14214, DISPATCH_GL(vmstate), ~LJ_VMST_C);
    if (op == BC_FUNCC) {
      dasm_put(Dst, 14224);
    } else {
      dasm_put(Dst, 14229, DISPATCH_GL(wrapf));
    }
    dasm_put(Dst, 14235, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top));
    break;

  /* ---------------------------------------------------------------------- */

  default:
    fprintf(stderr, "Error: undefined opcode BC_%s\n", bc_names[op]);
    exit(2);
    break;
  }
}

static int build_backend(BuildCtx *ctx)
{
  int op;
  int cmov = 1;
  int sse = 0;
#ifdef LUAJIT_CPU_NOCMOV
  cmov = 0;
#endif
#if defined(LUAJIT_CPU_SSE2) || defined(LJ_TARGET_X64)
  sse = 1;
#endif

  dasm_growpc(Dst, BC__MAX);

  build_subroutines(ctx, cmov, sse);

  dasm_put(Dst, 14261);
  for (op = 0; op < BC__MAX; op++)
    build_ins(ctx, (BCOp)op, op, cmov, sse);

  return BC__MAX;
}

/* Emit pseudo frame-info for all assembler functions. */
static void emit_asm_debug(BuildCtx *ctx)
{
#if LJ_64
#define SZPTR	"8"
#define BSZPTR	"3"
#define REG_SP	"0x7"
#define REG_RA	"0x10"
#else
#define SZPTR	"4"
#define BSZPTR	"2"
#define REG_SP	"0x4"
#define REG_RA	"0x8"
#endif
  switch (ctx->mode) {
  case BUILD_elfasm:
    fprintf(ctx->fp, "\t.section .debug_frame,\"\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe0:\n"
	"\t.long .LECIE0-.LSCIE0\n"
	".LSCIE0:\n"
	"\t.long 0xffffffff\n"
	"\t.byte 0x1\n"
	"\t.string \"\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	".LECIE0:\n\n");
    fprintf(ctx->fp,
	".LSFDE0:\n"
	"\t.long .LEFDE0-.LASFDE0\n"
	".LASFDE0:\n"
	"\t.long .Lframe0\n"
	"\t.long .Lbegin\n"
	"\t.long %d\n"
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
#if LJ_64
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#else
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE0:\n\n", (int)ctx->codesz, CFRAME_SIZE);
    fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe1:\n"
	"\t.long .LECIE1-.LSCIE1\n"
	".LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zPR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.uleb128 6\n"			/* augmentation length */
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.long lj_err_unwind_dwarf-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	".LECIE1:\n\n");
    fprintf(ctx->fp,
	".LSFDE1:\n"
	"\t.long .LEFDE1-.LASFDE1\n"
	".LASFDE1:\n"
	"\t.long .LASFDE1-.Lframe1\n"
	"\t.long .Lbegin-.\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
#if LJ_64
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#else
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE1:\n\n", (int)ctx->codesz, CFRAME_SIZE);
    break;
  case BUILD_coffasm:
    fprintf(ctx->fp, "\t.section .eh_frame,\"dr\"\n");
    fprintf(ctx->fp,
      "\t.def %slj_err_unwind_dwarf; .scl 2; .type 32; .endef\n",
      LJ_32 ? "_" : "");
    fprintf(ctx->fp,
	"Lframe1:\n"
	"\t.long LECIE1-LSCIE1\n"
	"LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zP\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.uleb128 5\n"			/* augmentation length */
	"\t.byte 0x00\n"			/* absptr */
	"\t.long %slj_err_unwind_dwarf\n"
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	"LECIE1:\n\n", LJ_32 ? "_" : "");
    fprintf(ctx->fp,
	"LSFDE1:\n"
	"\t.long LEFDE1-LASFDE1\n"
	"LASFDE1:\n"
	"\t.long LASFDE1-Lframe1\n"
	"\t.long %slj_vm_asm_begin\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
#if LJ_64
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#else
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	"LEFDE1:\n\n", LJ_32 ? "_" : "", (int)ctx->codesz, CFRAME_SIZE);
    break;
  /* Mental note: never let Apple design an assembler.
  ** Or a linker. Or a plastic case. But I digress.
  */
  case BUILD_machasm: {
    int i;
    fprintf(ctx->fp, "\t.section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n");
    fprintf(ctx->fp,
	"EH_frame1:\n"
	"\t.set L$set$x,LECIEX-LSCIEX\n"
	"\t.long L$set$x\n"
	"LSCIEX:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.ascii \"zPR\\0\"\n"
	"\t.byte 0x1\n"
	"\t.byte 128-" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.byte 6\n"				/* augmentation length */
	"\t.byte 0x9b\n"			/* indirect|pcrel|sdata4 */
#if LJ_64
	"\t.long _lj_err_unwind_dwarf+4@GOTPCREL\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte " REG_SP "\n\t.byte " SZPTR "\n"
#else
	"\t.long L_lj_err_unwind_dwarf$non_lazy_ptr-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte 0x5\n\t.byte 0x4\n"  /* esp=5 on 32 bit MACH-O. */
#endif
	"\t.byte 0x80+" REG_RA "\n\t.byte 0x1\n"
	"\t.align " BSZPTR "\n"
	"LECIEX:\n\n");
    for (i = 0; i < ctx->nsym; i++) {
      const char *name = ctx->sym[i].name;
      int32_t size = ctx->sym[i+1].ofs - ctx->sym[i].ofs;
      fprintf(ctx->fp,
	  "%s.eh:\n"
	  "LSFDE%d:\n"
	  "\t.set L$set$%d,LEFDE%d-LASFDE%d\n"
	  "\t.long L$set$%d\n"
	  "LASFDE%d:\n"
	  "\t.long LASFDE%d-EH_frame1\n"
	  "\t.long %s-.\n"
	  "\t.long %d\n"
	  "\t.byte 0\n"			/* augmentation length */
	  "\t.byte 0xe\n\t.byte %d\n"		/* def_cfa_offset */
#if LJ_64
	  "\t.byte 0x86\n\t.byte 0x2\n"	/* offset rbp */
	  "\t.byte 0x83\n\t.byte 0x3\n"	/* offset rbx */
	  "\t.byte 0x8f\n\t.byte 0x4\n"	/* offset r15 */
	  "\t.byte 0x8e\n\t.byte 0x5\n"	/* offset r14 */
#else
	  "\t.byte 0x84\n\t.byte 0x2\n"	/* offset ebp (4 for MACH-O)*/
	  "\t.byte 0x87\n\t.byte 0x3\n"	/* offset edi */
	  "\t.byte 0x86\n\t.byte 0x4\n"	/* offset esi */
	  "\t.byte 0x83\n\t.byte 0x5\n"	/* offset ebx */
#endif
	  "\t.align " BSZPTR "\n"
	  "LEFDE%d:\n\n",
	  name, i, i, i, i, i, i, i, name, size, CFRAME_SIZE, i);
    }
#if LJ_64
    fprintf(ctx->fp, "\t.subsections_via_symbols\n");
#else
    fprintf(ctx->fp,
      "\t.non_lazy_symbol_pointer\n"
      "L_lj_err_unwind_dwarf$non_lazy_ptr:\n"
      ".indirect_symbol _lj_err_unwind_dwarf\n"
      ".long 0\n");
#endif
    }
    break;
  default:  /* Difficult for other modes. */
    break;
  }
}

