--
-- Copyright ESIEE (2009) 
-- 
-- Author :
-- Camille Couprie (c.couprie@esiee.fr)
-- 
-- Contributors : 
-- Hugues Talbot (h.talbot@esiee.fr)
-- Leo Grady (leo.grady@siemens.com)
-- Laurent Najman (l.najman@esiee.fr)
-- 
-- This software contains some image processing algorithms whose purpose is to be
-- used primarily for research.
-- 
-- This software is governed by the CeCILL license under French law and
-- abiding by the rules of distribution of free software.  You can  use, 
-- modify and/ or redistribute the software under the terms of the CeCILL
-- license as circulated by CEA, CNRS and INRIA at the following URL
-- "http://www.cecill.info". 
-- 
-- As a counterpart to the access to the source code and  rights to copy,
-- modify and redistribute granted by the license, users are provided only
-- with a limited warranty  and the software's author,  the holder of the
-- economic rights,  and the successive licensors  have only  limited
-- liability. 
-- 
-- In this respect, the user's attention is drawn to the risks associated
-- with loading,  using,  modifying and/or developing or reproducing the
-- software by the user in light of its specific status of free software,
-- that may mean  that it is complicated to manipulate,  and  that  also
-- therefore means  that it is reserved for developers  and  experienced
-- professionals having in-depth computer knowledge. Users are therefore
-- encouraged to load and test the software's suitability as regards their
-- requirements in conditions enabling the security of their systems and/or 
-- data to be ensured and,  more generally, to use and operate it in the 
-- same conditions as regards security. 
-- 
-- The fact that you are presently reading this means that you have had
-- knowledge of the CeCILL license and that you accept its terms.
-- 

-- 
-- Note: this bit of code is a simple wrapper around the graph-based
-- image segmentation algorithms provided/published by Couprie et al.:
--
-- Camille Couprie, Leo Grady, Laurent Najman, Hugues Talbot,
-- "Power Watershed: A Unifying Graph-Based Optimization Framework",
-- PAMI, 2010
-- http://www.esiee.fr/~coupriec/code.html
--
-- The code has been modified in several aspects, to accomodoate Torch.
--
-- Wrapper: Clement Farabet.
-- 

-- load C lib
require 'libpowerwatersegm'

local infer_help_desc =
[[Computes a segmentation map given an input image, and a list
of seeds.

The map is computed using power watersheds, as described in
"Power Watershed: A Unifying Graph-Based Optimization Framework", by
Camille Couprie, Leo Grady, Laurent Najman, Hugues Talbot.
http://www.esiee.fr/~coupriec/code.html

The input image must be a WxHxN tensor, where N is the number
of channels (colors). N must be 3 or 1.

The list of seeds is a simple Lua table, of the following form:
seeds = {{x1,y1,C1}, {x2,y2,C2}, ...}

Each entry in the table is a tripled specifying the the 
(x,y) location, followed by the class (~= 0). ]]

local usage = 
toolBox.usage('powerwatersegm.infer',
              infer_help_desc,
              nil,
              {arg='image', type='torch.Tensor', help='input image [WxHxN tensor]'},
              {arg='seeds', type='table', help='list of seeds {{x1,y1,C1}, ...}'},
              {arg='algo', type='string', help='type of algo: Kruskal, PWq2 or Prim [default PWq2]'},
              {arg='geodesics', type='boolean', help='use geodesics [default=false]'})

local col = toolBox.COLORS

if not powerwatersegmLoaded then
   require 'XLearn'
   powerwatersegm = {}

   -- register functions
   powerwatersegm.infer = 
      function(args)
         -- get args
         args = args or {}
         local img = args.image
         local seeds = args.seeds
         local algo = args.algo or 2
         local geodesics = args.geodesics or false

         -- check args
         if not img or img:nDimension() ~= 3
                or (img:size(3) ~= 3 and img:size(3) ~= 1)
                or not seeds then
                error(usage)
         end

         -- transform args
         local tseeds = torch.Tensor(#seeds,3)
         for i,seed in ipairs(seeds) do 
            tseeds[i][1] = seed[1]-1
            tseeds[i][2] = seed[2]-1
            tseeds[i][3] = seed[3]
            if seed[1] > img:size(1) or seed[1] < 1 or seed[2] > img:size(2) or seed[2] < 1 then
               print(col.Red .. 'seeds are incorrect, please check range' .. col.none)
               error(usage)
            end
         end
         if algo == 'kruskal' or algo == 'Kruskal' or algo == 1 then algo = 1
         elseif algo == 'PWq2' or algo == 2 then algo = 2
         elseif algo == 'prim' or algo == 'Prim' or algo == 3 then algo = 3
         else error(usage) end

         -- compute
         return libpowerwatersegm.infer(img, tseeds, algo, geodesics)
      end

   powerwatersegm.testme = 
      function()
         local img = image.load(paths.concat(paths.install_lua_path, 'powerwatersegm/mountains.png'),3)
         local seeds = { { 251, 24, 3}, { 252, 24, 3}, { 253, 24, 3}, { 254, 24, 3}, { 251, 25, 3}, { 252, 25, 3}, { 253, 25, 3}, { 254, 25, 3}, { 251, 26, 3}, { 252, 26, 3}, { 253, 26, 3}, { 254, 26, 3}, { 251, 27, 3}, { 252, 27, 3}, { 253, 27, 3}, { 254, 27, 3}, { 385, 72, 12}, { 385, 73, 12}, { 386, 73, 12}, { 387, 73, 12}, { 388, 73, 12}, { 385, 74, 12}, { 386, 74, 12}, { 387, 74, 12}, { 388, 74, 12}, { 389, 74, 12}, { 385, 75, 12}, { 386, 75, 12}, { 387, 75, 12}, { 388, 75, 12}, { 389, 75, 12}, { 385, 76, 12}, { 386, 76, 12}, { 387, 76, 12}, { 388, 76, 12}, { 389, 76, 12}, { 386, 77, 12}, { 387, 77, 12}, { 388, 77, 12}, { 389, 77, 12}, { 386, 78, 12}, { 387, 78, 12}, { 388, 78, 12}, { 389, 78, 12}, { 169, 83, 14}, { 170, 83, 14}, { 171, 83, 14}, { 172, 83, 14}, { 173, 83, 14}, { 169, 84, 14}, { 170, 84, 14}, { 171, 84, 14}, { 172, 84, 14}, { 173, 84, 14}, { 169, 85, 14}, { 170, 85, 14}, { 171, 85, 14}, { 172, 85, 14}, { 173, 85, 14}, { 169, 86, 14}, { 170, 86, 14}, { 171, 86, 14}, { 172, 86, 14}, { 173, 86, 14}, { 138, 88, 11}, { 139, 88, 11}, { 140, 88, 11}, { 141, 88, 11}, { 138, 89, 11}, { 139, 89, 11}, { 140, 89, 11}, { 141, 89, 11}, { 138, 90, 11}, { 139, 90, 11}, { 140, 90, 11}, { 141, 90, 11}, { 138, 91, 11}, { 139, 91, 11}, { 140, 91, 11}, { 141, 91, 11}, { 138, 92, 11}, { 139, 92, 11}, { 140, 92, 11}, { 141, 92, 11}, { 438, 94, 13}, { 439, 94, 13}, { 440, 94, 13}, { 441, 94, 13}, { 438, 95, 13}, { 439, 95, 13}, { 440, 95, 13}, { 441, 95, 13}, { 438, 96, 13}, { 439, 96, 13}, { 440, 96, 13}, { 441, 96, 13}, { 438, 97, 13}, { 439, 97, 13}, { 440, 97, 13}, { 441, 97, 13}, { 474, 101, 2}, { 475, 101, 2}, { 476, 101, 2}, { 477, 101, 2}, { 478, 101, 2}, { 474, 102, 2}, { 475, 102, 2}, { 476, 102, 2}, { 477, 102, 2}, { 478, 102, 2}, { 474, 103, 2}, { 475, 103, 2}, { 476, 103, 2}, { 477, 103, 2}, { 478, 103, 2}, { 203, 104, 14}, { 204, 104, 14}, { 205, 104, 14}, { 206, 104, 14}, { 207, 104, 14}, { 474, 104, 2}, { 475, 104, 2}, { 476, 104, 2}, { 477, 104, 2}, { 478, 104, 2}, { 203, 105, 14}, { 204, 105, 14}, { 205, 105, 14}, { 206, 105, 14}, { 207, 105, 14}, { 203, 106, 14}, { 204, 106, 14}, { 205, 106, 14}, { 206, 106, 14}, { 207, 106, 14}, { 203, 107, 14}, { 204, 107, 14}, { 205, 107, 14}, { 206, 107, 14}, { 207, 107, 14}, { 183, 116, 11}, { 184, 116, 11}, { 185, 116, 11}, { 186, 116, 11}, { 183, 117, 11}, { 184, 117, 11}, { 185, 117, 11}, { 186, 117, 11}, { 183, 118, 11}, { 184, 118, 11}, { 185, 118, 11}, { 186, 118, 11}, { 183, 119, 11}, { 184, 119, 11}, { 185, 119, 11}, { 186, 119, 11}, { 183, 120, 11}, { 184, 120, 11}, { 185, 120, 11}, { 186, 120, 11}, { 183, 121, 11}, { 184, 121, 11}, { 185, 121, 11}, { 186, 121, 11}, { 427, 122, 2}, { 428, 122, 2}, { 429, 122, 2}, { 430, 122, 2}, { 426, 123, 2}, { 427, 123, 2}, { 428, 123, 2}, { 429, 123, 2}, { 430, 123, 2}, { 23, 124, 8}, { 24, 124, 8}, { 25, 124, 8}, { 26, 124, 8}, { 27, 124, 8}, { 425, 124, 2}, { 426, 124, 2}, { 427, 124, 2}, { 428, 124, 2}, { 429, 124, 2}, { 430, 124, 2}, { 23, 125, 8}, { 24, 125, 8}, { 25, 125, 8}, { 26, 125, 8}, { 27, 125, 8}, { 425, 125, 2}, { 426, 125, 2}, { 427, 125, 2}, { 428, 125, 2}, { 429, 125, 2}, { 430, 125, 2}, { 23, 126, 8}, { 24, 126, 8}, { 25, 126, 8}, { 26, 126, 8}, { 27, 126, 8}, { 425, 126, 2}, { 426, 126, 2}, { 427, 126, 2}, { 428, 126, 2}, { 429, 126, 2}, { 7, 127, 1}, { 8, 127, 1}, { 9, 127, 1}, { 10, 127, 1}, { 23, 127, 8}, { 24, 127, 8}, { 25, 127, 8}, { 26, 127, 8}, { 27, 127, 8}, { 425, 127, 2}, { 426, 127, 2}, { 427, 127, 2}, { 428, 127, 2}, { 7, 128, 1}, { 8, 128, 1}, { 9, 128, 1}, { 10, 128, 1}, { 425, 128, 2}, { 426, 128, 2}, { 427, 128, 2}, { 428, 128, 2}, { 7, 129, 1}, { 8, 129, 1}, { 9, 129, 1}, { 10, 129, 1}, { 425, 129, 2}, { 426, 129, 2}, { 427, 129, 2}, { 428, 129, 2}, { 7, 130, 1}, { 8, 130, 1}, { 9, 130, 1}, { 10, 130, 1}, { 93, 143, 8}, { 94, 143, 8}, { 95, 143, 8}, { 96, 143, 8}, { 93, 144, 8}, { 94, 144, 8}, { 95, 144, 8}, { 96, 144, 8}, { 97, 144, 8}, { 93, 145, 8}, { 94, 145, 8}, { 95, 145, 8}, { 96, 145, 8}, { 97, 145, 8}, { 93, 146, 8}, { 94, 146, 8}, { 95, 146, 8}, { 96, 146, 8}, { 97, 146, 8}, { 93, 147, 8}, { 94, 147, 8}, { 95, 147, 8}, { 96, 147, 8}, { 97, 147, 8}, { 94, 148, 8}, { 95, 148, 8}, { 96, 148, 8}, { 97, 148, 8}, { 363, 158, 12}, { 364, 158, 12}, { 365, 158, 12}, { 366, 158, 12}, { 363, 159, 12}, { 364, 159, 12}, { 365, 159, 12}, { 366, 159, 12}, { 363, 160, 12}, { 364, 160, 12}, { 365, 160, 12}, { 366, 160, 12}, { 363, 161, 12}, { 364, 161, 12}, { 365, 161, 12}, { 366, 161, 12}, { 113, 165, 13}, { 114, 165, 13}, { 115, 165, 13}, { 116, 165, 13}, { 117, 165, 13}, { 118, 165, 13}, { 119, 165, 13}, { 120, 165, 13}, { 113, 166, 13}, { 114, 166, 13}, { 115, 166, 13}, { 116, 166, 13}, { 117, 166, 13}, { 118, 166, 13}, { 119, 166, 13}, { 120, 166, 13}, { 381, 166, 2}, { 382, 166, 2}, { 383, 166, 2}, { 384, 166, 2}, { 113, 167, 13}, { 114, 167, 13}, { 115, 167, 13}, { 116, 167, 13}, { 117, 167, 13}, { 118, 167, 13}, { 119, 167, 13}, { 120, 167, 13}, { 121, 167, 13}, { 381, 167, 2}, { 382, 167, 2}, { 383, 167, 2}, { 384, 167, 2}, { 113, 168, 13}, { 114, 168, 13}, { 115, 168, 13}, { 116, 168, 13}, { 117, 168, 13}, { 118, 168, 13}, { 119, 168, 13}, { 120, 168, 13}, { 121, 168, 13}, { 381, 168, 2}, { 382, 168, 2}, { 383, 168, 2}, { 384, 168, 2}, { 116, 169, 13}, { 117, 169, 13}, { 118, 169, 13}, { 119, 169, 13}, { 120, 169, 13}, { 121, 169, 13}, { 381, 169, 2}, { 382, 169, 2}, { 383, 169, 2}, { 384, 169, 2}, { 116, 170, 13}, { 117, 170, 13}, { 118, 170, 13}, { 119, 170, 13}, { 120, 170, 13}, { 121, 170, 13}, { 381, 170, 2}, { 382, 170, 2}, { 383, 170, 2}, { 384, 170, 2}, { 381, 171, 2}, { 382, 171, 2}, { 383, 171, 2}, { 384, 171, 2}, { 39, 177, 9}, { 40, 177, 9}, { 41, 177, 9}, { 42, 177, 9}, { 39, 178, 9}, { 40, 178, 9}, { 41, 178, 9}, { 42, 178, 9}, { 39, 179, 9}, { 40, 179, 9}, { 41, 179, 9}, { 42, 179, 9}, { 39, 180, 9}, { 40, 180, 9}, { 41, 180, 9}, { 42, 180, 9}, { 179, 185, 13}, { 180, 185, 13}, { 181, 185, 13}, { 182, 185, 13}, { 179, 186, 13}, { 180, 186, 13}, { 181, 186, 13}, { 182, 186, 13}, { 30, 187, 1}, { 31, 187, 1}, { 32, 187, 1}, { 33, 187, 1}, { 34, 187, 1}, { 68, 187, 15}, { 69, 187, 15}, { 70, 187, 15}, { 71, 187, 15}, { 179, 187, 13}, { 180, 187, 13}, { 181, 187, 13}, { 182, 187, 13}, { 30, 188, 1}, { 31, 188, 1}, { 32, 188, 1}, { 33, 188, 1}, { 34, 188, 1}, { 68, 188, 15}, { 69, 188, 15}, { 70, 188, 15}, { 71, 188, 15}, { 179, 188, 13}, { 180, 188, 13}, { 181, 188, 13}, { 182, 188, 13}, { 30, 189, 1}, { 31, 189, 1}, { 32, 189, 1}, { 33, 189, 1}, { 34, 189, 1}, { 68, 189, 15}, { 69, 189, 15}, { 70, 189, 15}, { 71, 189, 15}, { 30, 190, 1}, { 31, 190, 1}, { 32, 190, 1}, { 33, 190, 1}, { 34, 190, 1}, { 68, 190, 15}, { 69, 190, 15}, { 70, 190, 15}, { 71, 190, 15}, { 305, 192, 13}, { 306, 192, 13}, { 307, 192, 13}, { 308, 192, 13}, { 309, 192, 13}, { 310, 192, 13}, { 311, 192, 13}, { 312, 192, 13}, { 305, 193, 13}, { 306, 193, 13}, { 307, 193, 13}, { 308, 193, 13}, { 309, 193, 13}, { 310, 193, 13}, { 311, 193, 13}, { 312, 193, 13}, { 305, 194, 13}, { 306, 194, 13}, { 307, 194, 13}, { 308, 194, 13}, { 309, 194, 13}, { 310, 194, 13}, { 311, 194, 13}, { 312, 194, 13}, { 305, 195, 13}, { 306, 195, 13}, { 307, 195, 13}, { 308, 195, 13}, { 309, 195, 13}, { 310, 195, 13}, { 311, 195, 13}, { 312, 195, 13}, { 305, 196, 13}, { 306, 196, 13}, { 307, 196, 13}, { 308, 196, 13}, { 309, 196, 13}, { 310, 196, 13}, { 311, 196, 13}, { 312, 196, 13}, { 137, 198, 5}, { 138, 198, 5}, { 139, 198, 5}, { 140, 198, 5}, { 141, 198, 5}, { 142, 198, 5}, { 143, 198, 5}, { 137, 199, 5}, { 138, 199, 5}, { 139, 199, 5}, { 140, 199, 5}, { 141, 199, 5}, { 142, 199, 5}, { 143, 199, 5}, { 137, 200, 5}, { 138, 200, 5}, { 139, 200, 5}, { 140, 200, 5}, { 141, 200, 5}, { 142, 200, 5}, { 143, 200, 5}, { 203, 200, 10}, { 204, 200, 10}, { 205, 200, 10}, { 206, 200, 10}, { 137, 201, 5}, { 138, 201, 5}, { 139, 201, 5}, { 140, 201, 5}, { 141, 201, 5}, { 142, 201, 5}, { 143, 201, 5}, { 203, 201, 10}, { 204, 201, 10}, { 205, 201, 10}, { 206, 201, 10}, { 203, 202, 10}, { 204, 202, 10}, { 205, 202, 10}, { 206, 202, 10}, { 203, 203, 10}, { 204, 203, 10}, { 205, 203, 10}, { 206, 203, 10}, { 51, 204, 7}, { 52, 204, 7}, { 53, 204, 7}, { 54, 204, 7}, { 51, 205, 7}, { 52, 205, 7}, { 53, 205, 7}, { 54, 205, 7}, { 51, 206, 7}, { 52, 206, 7}, { 53, 206, 7}, { 54, 206, 7}, { 51, 207, 7}, { 52, 207, 7}, { 53, 207, 7}, { 54, 207, 7}, { 191, 207, 10}, { 192, 207, 10}, { 193, 207, 10}, { 194, 207, 10}, { 191, 208, 10}, { 192, 208, 10}, { 193, 208, 10}, { 194, 208, 10}, { 191, 209, 10}, { 192, 209, 10}, { 193, 209, 10}, { 194, 209, 10}, { 159, 210, 5}, { 160, 210, 5}, { 161, 210, 5}, { 162, 210, 5}, { 191, 210, 10}, { 192, 210, 10}, { 193, 210, 10}, { 194, 210, 10}, { 159, 211, 5}, { 160, 211, 5}, { 161, 211, 5}, { 162, 211, 5}, { 159, 212, 5}, { 160, 212, 5}, { 161, 212, 5}, { 162, 212, 5}, { 159, 213, 5}, { 160, 213, 5}, { 161, 213, 5}, { 162, 213, 5}, { 159, 214, 5}, { 160, 214, 5}, { 161, 214, 5}, { 162, 214, 5}, { 238, 215, 10}, { 239, 215, 10}, { 240, 215, 10}, { 241, 215, 10}, { 242, 215, 10}, { 243, 215, 10}, { 238, 216, 10}, { 239, 216, 10}, { 240, 216, 10}, { 241, 216, 10}, { 242, 216, 10}, { 243, 216, 10}, { 238, 217, 10}, { 239, 217, 10}, { 240, 217, 10}, { 241, 217, 10}, { 242, 217, 10}, { 243, 217, 10}, { 238, 218, 10}, { 239, 218, 10}, { 240, 218, 10}, { 241, 218, 10}, { 242, 218, 10}, { 243, 218, 10}, { 330, 227, 6}, { 331, 227, 6}, { 332, 227, 6}, { 333, 227, 6}, { 334, 227, 6}, { 330, 228, 6}, { 331, 228, 6}, { 332, 228, 6}, { 333, 228, 6}, { 334, 228, 6}, { 330, 229, 6}, { 331, 229, 6}, { 332, 229, 6}, { 333, 229, 6}, { 334, 229, 6}, { 182, 230, 10}, { 183, 230, 10}, { 184, 230, 10}, { 185, 230, 10}, { 186, 230, 10}, { 330, 230, 6}, { 331, 230, 6}, { 332, 230, 6}, { 333, 230, 6}, { 334, 230, 6}, { 182, 231, 10}, { 183, 231, 10}, { 184, 231, 10}, { 185, 231, 10}, { 186, 231, 10}, { 182, 232, 10}, { 183, 232, 10}, { 184, 232, 10}, { 185, 232, 10}, { 186, 232, 10}, { 182, 233, 10}, { 183, 233, 10}, { 184, 233, 10}, { 185, 233, 10}, { 186, 233, 10}, { 360, 249, 2}, { 361, 249, 2}, { 362, 249, 2}, { 363, 249, 2}, { 360, 250, 2}, { 361, 250, 2}, { 362, 250, 2}, { 363, 250, 2}, { 360, 251, 2}, { 361, 251, 2}, { 362, 251, 2}, { 363, 251, 2}, { 360, 252, 2}, { 361, 252, 2}, { 362, 252, 2}, { 363, 252, 2}, { 360, 253, 2}, { 361, 253, 2}, { 362, 253, 2}, { 363, 253, 2}, { 70, 254, 7}, { 71, 254, 7}, { 72, 254, 7}, { 73, 254, 7}, { 360, 254, 2}, { 361, 254, 2}, { 362, 254, 2}, { 363, 254, 2}, { 70, 255, 7}, { 71, 255, 7}, { 72, 255, 7}, { 73, 255, 7}, { 360, 255, 2}, { 361, 255, 2}, { 362, 255, 2}, { 363, 255, 2}, { 70, 256, 7}, { 71, 256, 7}, { 72, 256, 7}, { 73, 256, 7}, { 70, 257, 7}, { 71, 257, 7}, { 72, 257, 7}, { 73, 257, 7}, { 168, 265, 4}, { 169, 265, 4}, { 170, 265, 4}, { 171, 265, 4}, { 168, 266, 4}, { 169, 266, 4}, { 170, 266, 4}, { 171, 266, 4}, { 168, 267, 4}, { 169, 267, 4}, { 170, 267, 4}, { 171, 267, 4}, { 331, 267, 4}, { 332, 267, 4}, { 333, 267, 4}, { 334, 267, 4}, { 168, 268, 4}, { 169, 268, 4}, { 170, 268, 4}, { 171, 268, 4}, { 330, 268, 4}, { 331, 268, 4}, { 332, 268, 4}, { 333, 268, 4}, { 334, 268, 4}, { 54, 269, 1}, { 55, 269, 1}, { 56, 269, 1}, { 57, 269, 1}, { 168, 269, 4}, { 169, 269, 4}, { 170, 269, 4}, { 171, 269, 4}, { 330, 269, 4}, { 331, 269, 4}, { 332, 269, 4}, { 333, 269, 4}, { 334, 269, 4}, { 54, 270, 1}, { 55, 270, 1}, { 56, 270, 1}, { 57, 270, 1}, { 330, 270, 4}, { 331, 270, 4}, { 332, 270, 4}, { 333, 270, 4}, { 334, 270, 4}, { 54, 271, 1}, { 55, 271, 1}, { 56, 271, 1}, { 57, 271, 1}, { 330, 271, 4}, { 331, 271, 4}, { 332, 271, 4}, { 333, 271, 4}, { 334, 271, 4}, { 54, 272, 1}, { 55, 272, 1}, { 56, 272, 1}, { 57, 272, 1}, { 54, 273, 1}, { 55, 273, 1}, { 56, 273, 1}, { 57, 273, 1}, { 275, 288, 4}, { 276, 288, 4}, { 277, 288, 4}, { 278, 288, 4}, { 279, 288, 4}, { 280, 288, 4}, { 281, 288, 4}, { 275, 289, 4}, { 276, 289, 4}, { 277, 289, 4}, { 278, 289, 4}, { 279, 289, 4}, { 280, 289, 4}, { 281, 289, 4}, { 209, 290, 4}, { 210, 290, 4}, { 211, 290, 4}, { 212, 290, 4}, { 213, 290, 4}, { 214, 290, 4}, { 215, 290, 4}, { 216, 290, 4}, { 275, 290, 4}, { 276, 290, 4}, { 277, 290, 4}, { 278, 290, 4}, { 279, 290, 4}, { 280, 290, 4}, { 281, 290, 4}, { 209, 291, 4}, { 210, 291, 4}, { 211, 291, 4}, { 212, 291, 4}, { 213, 291, 4}, { 214, 291, 4}, { 215, 291, 4}, { 216, 291, 4}, { 275, 291, 4}, { 276, 291, 4}, { 277, 291, 4}, { 278, 291, 4}, { 279, 291, 4}, { 280, 291, 4}, { 281, 291, 4}, { 209, 292, 4}, { 210, 292, 4}, { 211, 292, 4}, { 212, 292, 4}, { 213, 292, 4}, { 214, 292, 4}, { 215, 292, 4}, { 216, 292, 4}, { 209, 293, 4}, { 210, 293, 4}, { 211, 293, 4}, { 212, 293, 4}, { 213, 293, 4}, { 214, 293, 4}, { 215, 293, 4}, { 216, 293, 4}, { 105, 299, 4}, { 106, 299, 4}, { 107, 299, 4}, { 108, 299, 4}, { 109, 299, 4}, { 110, 299, 4}, { 111, 299, 4}, { 112, 299, 4}, { 113, 299, 4}, { 114, 299, 4}, { 115, 299, 4}, { 105, 300, 4}, { 106, 300, 4}, { 107, 300, 4}, { 108, 300, 4}, { 109, 300, 4}, { 110, 300, 4}, { 111, 300, 4}, { 112, 300, 4}, { 113, 300, 4}, { 114, 300, 4}, { 115, 300, 4}, { 105, 301, 4}, { 106, 301, 4}, { 107, 301, 4}, { 108, 301, 4}, { 109, 301, 4}, { 110, 301, 4}, { 111, 301, 4}, { 112, 301, 4}, { 113, 301, 4}, { 114, 301, 4}, { 115, 301, 4}, { 105, 302, 4}, { 106, 302, 4}, { 107, 302, 4}, { 108, 302, 4}, { 109, 302, 4}, { 110, 302, 4}, { 111, 302, 4}, { 112, 302, 4}, { 113, 302, 4}, { 114, 302, 4}, { 115, 302, 4}, { 329, 310, 4}, { 330, 310, 4}, { 331, 310, 4}, { 332, 310, 4}, { 329, 311, 4}, { 330, 311, 4}, { 331, 311, 4}, { 332, 311, 4}, { 328, 312, 4}, { 329, 312, 4}, { 330, 312, 4}, { 331, 312, 4}, { 332, 312, 4}, { 328, 313, 4}, { 329, 313, 4}, { 330, 313, 4}, { 331, 313, 4}, { 332, 313, 4}, { 328, 314, 4}, { 329, 314, 4}, { 330, 314, 4}, { 331, 314, 4}, { 332, 314, 4}, { 328, 315, 4}, { 329, 315, 4}, { 330, 315, 4}, { 331, 315, 4}, { 328, 316, 4}, { 329, 316, 4}, { 330, 316, 4}, { 331, 316, 4} }

         local res = {}
         local qtz = {}
         local t = {}
         local colors = image.createColorMap(256)

         for i = 1,3 do
            t[i] = os.clock()
            res[i] = powerwatersegm.infer{image = img,
                                          seeds = seeds,
                                          algo = i}
            t[i] = (os.clock() - t[i])*1000
            temp = res[i]:mul(-1):add(256)
            qtz[i] = torch.Tensor(temp:size(1), temp:size(2), 3)
            image.maskToRGB(temp,colors,qtz[i])
         end
         
         image.displayList{images={img, img, img,
                                   qtz[1], qtz[2], qtz[3]},
                           win_w=img:size(1)*3, win_h=img:size(2)*2,
                           legend='Segmentation [Power Watershed with '..(#seeds)..' seeds]',
                           legends={'input', 'input', 'input',
                                    'Kruskal [' .. t[1] .. 'ms]', 
                                    'PW q=2 [' .. t[2] .. 'ms]', 
                                    'Prim [' .. t[3] .. 'ms]'}}
      end

   powerwatersegmLoaded = true
end

return powerwatersegm
